"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[1264],{5168:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6c60f00b",path:"/typescript/type-compatibility.html",title:"类型兼容",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基础类型",slug:"基础类型",children:[]},{level:2,title:"interface",slug:"interface",children:[]},{level:2,title:"联合类型",slug:"联合类型",children:[]},{level:2,title:"Function",slug:"function",children:[]},{level:2,title:"枚举",slug:"枚举",children:[{level:3,title:"协变和逆变",slug:"协变和逆变",children:[]}]}],filePathRelative:"typescript/type-compatibility.md",git:{updatedTime:1644572341e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:3}]}}},6565:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="类型兼容" tabindex="-1"><a class="header-anchor" href="#类型兼容" aria-hidden="true">#</a> 类型兼容</h1><p>TS中的类型兼容性是基于结构子类型的,即判断类型是否兼容时,关注点应该是结构(成员)而不是名称。TS中结构化类型系统的基本规则是,如果X要兼容Y, 那么Y至少具有与X相同的属性。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">N1</span></span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">N2</span></span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// N1和N2存在相同的结构, 虽然并不是同一个类型,但是结构兼容,因此能够赋值成功</span>\n<span class="token keyword">let</span> p<span class="token operator">:</span> <span class="token constant">N1</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;n2&#39;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">N2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 同理, Person的实例与N1结构兼容,因此也可以正常赋值</span>\np <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="基础类型" tabindex="-1"><a class="header-anchor" href="#基础类型" aria-hidden="true">#</a> 基础类型</h2><ul><li>any为任意类型,基本兼容所有类型,自由度极高,但是与我们使用TS的初衷相违背,在大部分情况下尽量避免使用any</li><li>unknown为未知类型,基本兼容所有类型, 常用于双重断言</li><li>若所有属于类型A的值都属于类型B,那么A是B的子类型,子类型可以赋值给父类型,也可以说是B兼容A(父类型兼容子类型,所以子类型可以赋值给父类型)。</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// any兼容性很强,因此尽量避免使用</span>\n<span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\na <span class="token operator">=</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">;</span>\na <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\na <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// unknown同理</span>\n<span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>\nu <span class="token operator">=</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">;</span>\nu <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\nu <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// 字符串字面量的联合类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Chars</span> <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> c<span class="token operator">:</span>Chars <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// string是所有字符串的联合类型,因此包含了Chars,因此Chars是string的子类型</span>\n<span class="token keyword">let</span> s<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>\n\n<span class="token comment">// any是任意类型, 包含了string,因此string是any的子类型</span>\n<span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> interface</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Person是父类型</span>\n<span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Student是子类型</span>\n<span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  source<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 解析: Person代表所有拥有name、type属性(类型也要符合)的值,而Student代表拥有name、type以及source(类型也要符合)的值,可以看出,Student仅仅是Person的一部分(拥有source的Person), 也就是说Student类型的值全部都是Person类型(Student是Person的子类型),但是Person类型的值不一定是Student类型的值。</span>\n\n<span class="token comment">// Student extends Person 判断Student是否是Person的子类型,此处使用三元运算符,如果是返回true类型,否则返回false类型</span>\n<span class="token comment">// 注意: 此处返回的是类型,因为无论Student还是Person,都是类型,所以这一句中的其他值以及返回值,都是类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Student <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true, Student是Person的子类型</span>\n\n<span class="token keyword">let</span> p<span class="token operator">:</span> Person<span class="token punctuation">;</span>\n<span class="token keyword">let</span> s<span class="token operator">:</span> Student<span class="token punctuation">;</span>\n\n<span class="token comment">// 子类型可以赋值给父类型,而父类型不能赋值给子类型</span>\np <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">// OK </span>\ns <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">// 报错: 类型 &quot;Person&quot; 中缺少属性 &quot;source&quot;，但类型 &quot;Student&quot; 中需要该属性</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 联合类型 - 详情见高级类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">F</span></span> <span class="token operator">=</span>  <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 解析: F表示所有的字符串、数字和布尔值,而S表示所有的字符串和数字,这一看就知道,S类型包含的所有值也都是属于F类型,所以S类型是F类型的子类型,反之不成立,因为F类型中的布尔值并不在S类型中。</span>\n\n<span class="token comment">// S extends F 判断S是否是F的子类型,此处使用三元运算符,如果是返回true类型,否则返回false类型</span>\n<span class="token comment">// 注意: 此处返回的是类型,因为无论S还是F,都是类型,所以这一句中的其他值以及返回值,都是类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">F</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 联合类型使用extends时会对每项进行extends并使用｜运算符,相当于</span>\n<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">F</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">F</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 此处,联合类型的实际类型会根据赋值而改变,赋值字符串时是string,赋值布尔值时是boolean</span>\n<span class="token comment">// 所以本质上只是联合类型中的其中一种</span>\n<span class="token keyword">let</span> f1<span class="token operator">:</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 此时f1为string类型,不是F类型,可以赋值给S类型</span>\n<span class="token keyword">let</span> s1<span class="token operator">:</span> <span class="token constant">S</span> <span class="token operator">=</span> f1<span class="token punctuation">;</span> <span class="token comment">// OK</span>\n\n<span class="token keyword">let</span> f2<span class="token operator">:</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 此时f2为boolean类型,不是F类型,不能赋值给S类型</span>\n<span class="token keyword">let</span> s2<span class="token operator">:</span> <span class="token constant">S</span> <span class="token operator">=</span> f2<span class="token punctuation">;</span> <span class="token comment">// 不能将类型“boolean”分配给类型“S”</span>\n\n<span class="token comment">// fn返回值类型为F</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">F</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 根据随机数返回 string/number/boolean其中一种</span>\n  <span class="token keyword">return</span> random <span class="token operator">&gt;</span> <span class="token number">0.6</span> <span class="token operator">?</span> <span class="token function">String</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span> <span class="token operator">:</span> random <span class="token operator">&gt;</span> <span class="token number">0.3</span> <span class="token operator">?</span> random <span class="token operator">:</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 不能将类型“F”分配给类型“S”  -   不能将类型“boolean”分配给类型“S”</span>\n<span class="token keyword">let</span> f3<span class="token operator">:</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h2><p>函数类型需要考虑的参数列表以及返回值类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 函数仅考虑参数列表时,若类型A的参数列表能够按序的在类型B的参数列表中找到对应类型的参数,则类型A是类型B的子类型,子类型可以赋值给父类型</span>\n<span class="token comment">// 函数参数列表需要关注的是类型,参数名并不重要</span>\n<span class="token keyword">type</span> <span class="token class-name">fnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>s<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fn1<span class="token operator">:</span> <span class="token function-variable function">fnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 空列表直接满足,不用找</span>\n<span class="token keyword">const</span> fn2<span class="token operator">:</span> <span class="token function-variable function">fnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 第一个参数是number,fnType第一个参数也是number,所以是fnType的子类型,可以赋值</span>\n<span class="token keyword">const</span> fn3<span class="token operator">:</span> <span class="token function-variable function">fnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 参数列表的参数分别是number、string,和fnType一致,是其子类型,可以赋值</span>\n\n<span class="token comment">// 参数列表不符合</span>\n<span class="token comment">// const fn4: fnType = (str:string, num: number) =&gt; &#39;&#39;; // 不能将类型“(str: string, num: number) =&gt; string”分配给类型“fnType”</span>\n\n<span class="token comment">// 函数除了要考虑参数列表,还要考虑返回值</span>\n<span class="token comment">// 如此处,fnType的返回值是string</span>\n<span class="token comment">// const fn5:fnType = () =&gt; 1024; // 不能将类型“number”分配给类型“string”, fnType限制返回值必须是string或能够赋值给string的值</span>\n<span class="token keyword">const</span> fn6<span class="token operator">:</span> <span class="token function-variable function">fnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK, Object()的返回值是any类型,而不是Object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><ul><li>成员包含数字的枚举与number类型兼容</li><li>枚举之间无论成员是否一致,都互不兼容,</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 只要有一个成员是数字即可, Up取的是默认0</span>\n<span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>\n  Up<span class="token punctuation">,</span>\n  Down <span class="token operator">=</span> <span class="token string">&#39;Down&#39;</span><span class="token punctuation">,</span>\n  Left <span class="token operator">=</span> <span class="token string">&#39;Left&#39;</span><span class="token punctuation">,</span>\n  Right <span class="token operator">=</span> <span class="token string">&#39;Rigth&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">enum</span> OtherDirection <span class="token punctuation">{</span>\n  Up<span class="token punctuation">,</span>\n  Down <span class="token operator">=</span> <span class="token string">&#39;Down&#39;</span><span class="token punctuation">,</span>\n  Left <span class="token operator">=</span> <span class="token string">&#39;Left&#39;</span><span class="token punctuation">,</span>\n  Right <span class="token operator">=</span> <span class="token string">&#39;Rigth&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> direction<span class="token operator">:</span> Direction <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 数字枚举与number兼容</span>\n<span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span> <span class="token comment">// 数字枚举与number兼容</span>\n\n<span class="token comment">// let oDirection: Direction = OtherDirection.Up; // 不同枚举无论是否成员一致,都无法兼容</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="协变和逆变" tabindex="-1"><a class="header-anchor" href="#协变和逆变" aria-hidden="true">#</a> 协变和逆变</h3>',17),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);