"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[9603],{7768:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-756928fd",path:"/javascript/data-type/primitive-data-type.html",title:"基本数据类型",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"string",slug:"string",children:[]},{level:2,title:"number",slug:"number",children:[]},{level:2,title:"boolean",slug:"boolean",children:[]},{level:2,title:"undefined",slug:"undefined",children:[]},{level:2,title:"null",slug:"null",children:[]},{level:2,title:"Symbol",slug:"symbol",children:[{level:3,title:"基本使用",slug:"基本使用",children:[]},{level:3,title:"Symbol类型转换",slug:"symbol类型转换",children:[]},{level:3,title:"作为属性名",slug:"作为属性名",children:[]},{level:3,title:"Symbol.keyFor和Symbol.for",slug:"symbol-keyfor和symbol-for",children:[]},{level:3,title:"实用内置Symbol",slug:"实用内置symbol",children:[]}]},{level:2,title:"BigInt",slug:"bigint",children:[]}],filePathRelative:"javascript/data-type/primitive-data-type.md",git:{updatedTime:1641315198e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:6}]}}},3466:(n,s,a)=>{a.r(s),a.d(s,{default:()=>M});var p=a(6252);const t=(0,p.uE)('<h1 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h1><p>基本数据类型(原始值/原始数据类型): 无方法、无对象、无法修改的数据</p><p>当前Javascript中有7种基本数据类型：<strong>String、Number、Boolean、Null、Undefined、Symbol(ES6)、BigInt(ES10)</strong></p><h6 id="无法修改" tabindex="-1"><a class="header-anchor" href="#无法修改" aria-hidden="true">#</a> 无法修改</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 示例</span>\n<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 初始化时, str的值为 &#39;hello&#39;</span>\nstr <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">;</span>         <span class="token comment">// 赋值其实修改的是变量存储的值,&#39;hello&#39;本身并没有改变,只是str存储的值变成了 &#39;hi&#39;</span>\nstr<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// 转换成大写, 返回HI,但是不影响原本的str</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// hi </span>\n\n\n<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\nnum <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\n\n<span class="token comment">// 结论：基本数据类型无法修改，你可以修改的只是存储在某个变量上的值</span>\n<span class="token comment">// 你对数字、字符串做操作，本质上返回的也是一个新的数字、字符串,不会改变原来的数字、字符串,其他基本数据类型同理</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h6 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 基本数据类型除了null和undefined,都存在其构造函数</span>\n<span class="token comment">// 构造函数主要有两种用法</span>\n<span class="token comment">// 1. 创建包装对象 - 装箱</span>\n<span class="token comment">// 加上new关键字，创建对应的包装对象,其valueOf方法返回基本数据类型</span>\n<span class="token comment">// 演示String,其他几个同理,Symbol不能使用new关键字</span>\n<span class="token keyword">const</span> strObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;String-Type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strObj<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// [String: &#39;String-Type&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> strObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// object, 包装对象，顾名思义，是对象类型</span>\n<span class="token comment">// 将包装对象转成基本数据类型 - 拆箱</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strObj<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// String-Type</span>\n\n<span class="token comment">// 前面说到过，基本数据类型没有方法，那为什么我们可以使用方法呢？</span>\n<span class="token comment">// 答：本质上是JS引擎将基本数据类型转换成了对应的包装对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;String-Type&#39;</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// string-type</span>\n<span class="token comment">// 开发者使用的时候是感知不到的,相当于</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;String-Type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string-type</span>\n\n<span class="token comment">// 由于null和undefined没有构造函数,无法装箱,所以它们是不能调用属性和方法的</span>\n\n<span class="token comment">// 2. 转换数据类型 - 显式类型转换</span>\n<span class="token comment">// JS引擎自动转换是隐式类型转换</span>\n<span class="token comment">// 当构造函数不使用new关键字时，它就变成了转换函数，用于转换数据类型</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &#39;1024&#39;, 等价于 &#39;&#39; + 1024</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false,  等价于 !!&#39;&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// NaN,    等价于 +&#39;!&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Symbol(s)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&#39;1024&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024n</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> string</h2><p>String(字符串)代表0或多个16位Unicode字符序列，可以使用单引号(&#39;&#39;)、双引号(&quot;&quot;)和反引号(``)表示。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ssx <span class="token operator">=</span> <span class="token string">&#39;孙尚香&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mk <span class="token operator">=</span> <span class="token string">&quot;马可波罗&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> gsl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">公孙离</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h6 id="字符字面量" tabindex="-1"><a class="header-anchor" href="#字符字面量" aria-hidden="true">#</a> 字符字面量</h6><table><thead><tr><th style="text-align:center;">字面量</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">\\n</td><td style="text-align:center;">换行</td></tr><tr><td style="text-align:center;">\\r</td><td style="text-align:center;">回车</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:center;">制表符</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:center;">退格</td></tr><tr><td style="text-align:center;">\\f</td><td style="text-align:center;">换页，其实就是换行，然后前面填充空格至上一行的长度</td></tr><tr><td style="text-align:center;">\\\\</td><td style="text-align:center;">反斜杠(\\)</td></tr><tr><td style="text-align:center;">\\&#39;</td><td style="text-align:center;">单引号,字符串以单引号表示时使用,如 <code>&#39;He\\&#39;s code is nice&#39;</code></td></tr><tr><td style="text-align:center;">\\&quot;</td><td style="text-align:center;">双引号,字符串以双引号表示时使用,如 <code>&quot;He said \\&quot;Hi\\&quot;&quot;</code></td></tr><tr><td style="text-align:center;">\\`</td><td style="text-align:center;">反引号,字符串以反引号表示时使用,如 <code>`He said \\`Hi\\``</code></td></tr></tbody></table><h6 id="转换成字符串" tabindex="-1"><a class="header-anchor" href="#转换成字符串" aria-hidden="true">#</a> 转换成字符串</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 使用 &#39;&#39; + </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// &#39;1024&#39;</span>\n\n<span class="token comment">// 2. 使用构造函数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#39;1024&#39; </span>\n\n<span class="token comment">// 3. toString方法,null和undefined没有</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1024.</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1024&#39; ,为什么是..，因为数字存在小数点，用于区分</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',14),e={id:"模版字符串",tabindex:"-1"},o=(0,p._)("a",{class:"header-anchor",href:"#模版字符串","aria-hidden":"true"},"#",-1),c=(0,p.Uk)(" 模版字符串 "),l=(0,p.uE)('<p>ES6新增了模版字符串，其具有可以换行以及使用变量的能力,使用 ``定义。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 跨行定义字符串, &quot;&quot;和&#39;&#39;则不行</span>\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  line 1,\n  line 2,\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. 在``中使用变量,需要使用${}包裹</span>\n<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">是程序员节!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024是程序员节!</span>\n<span class="token comment">// 相当于</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date <span class="token operator">+</span> <span class="token string">&#39;是程序员节!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024是程序员节!</span>\n<span class="token comment">// 和字符串拼接相比，模板字符串更加简洁</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h6 id="字符串常用方法" tabindex="-1"><a class="header-anchor" href="#字符串常用方法" aria-hidden="true">#</a> 字符串常用方法</h6>',3),u=(0,p.Uk)("以下演示的是最基本的用法，详细用法需参考 "),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("MDN - String"),k=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// chatAt(index) 获取字符串index位置的字符</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Easy&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// E </span>\n\n<span class="token comment">// charCodeAt(index) 获取字符串index位置字符对应的Unicode值</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hard&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 72,  H对应的是72</span>\n\n<span class="token comment">// concat(str) 拼接字符串,可接受多个字符串</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Learn &#39;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;String &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Learn String !</span>\n\n<span class="token comment">// startsWith(str) 是否以str开头，返回值是 true/false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Learn String!&#39;</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Learn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true</span>\n\n<span class="token comment">// endsWith(str) 是否以str结尾,返回值是 true/false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Learn String!&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true</span>\n\n<span class="token comment">// includes(str) 是否包含返回str, true/false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Learn String!&#39;</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;String&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// indexOf(str) 左-&gt;右，返回找到的第一个索引值,不存在返回 -1 </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Learn String!&#39;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;String&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 6</span>\n\n<span class="token comment">// lastIndexOf(str) 右边-&gt;左，返回找到的第一个索引值,不存在返回 -1 </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Learn String!&#39;</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;String&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n\n\n<span class="token comment">// padStart(length,padString)和padEnd(length,padString)</span>\n<span class="token comment">// padStart左侧填充，padEnd右侧填充，将字符串填充到length长度</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Me&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ---Me</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Me&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Me---</span>\n\n<span class="token comment">// repeat(count)  重复字符串cout次</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ...</span>\n\n<span class="token comment">// replace(oldStr,newStr) 替换字符串,支持正则表达式</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is easy&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;easy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hard&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This is hard</span>\n\n<span class="token comment">// slice(start,end) 提取start~end部分的字符串作为新字符串返回，不影响原本的字符串</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Easy Hard&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Easy</span>\n\n<span class="token comment">// split(str) 以str对原字符串进行切割放入数组并返回</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abcde&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ]</span>\n<span class="token comment">// 以空格切割成数组更推荐使用[...&#39;&#39;]或Array.form(&#39;&#39;)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;😊&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 2,可以看出,emoji表情占两个字符长度 </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;😊&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [ &#39;�&#39;, &#39;�&#39; ],以&#39;&#39;切割,😊会被切割成两个字符放入数组</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">&#39;😊&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// [&#39;😊&#39;],正常转换成数组</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&#39;😊&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;😊&#39;],正常转换成数组</span>\n\n<span class="token comment">// substring(start,end) 返回索引值 start～end的字符串，不包含索引为end到字符</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;How are you?&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// are</span>\n\n<span class="token comment">// toLocaleLowerCase()转小写，toLocaleUpperCase()转大些</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Nice&#39;</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nice</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Nice&#39;</span><span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NICE</span>\n\n\n<span class="token comment">// trim()去除两侧空格,trimStart()去除左侧空格，trimEnd()去除右侧空格</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;  Me  &#39;</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Me</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;   Me&#39;</span><span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Me</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Me   &#39;</span><span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Me</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><h2 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> number</h2><p>数值类型，用于表示数字，包括整数和浮点数,能够准确表示的整数范围在-2**53到2**53之间</p><h6 id="数字字面量" tabindex="-1"><a class="header-anchor" href="#数字字面量" aria-hidden="true">#</a> 数字字面量</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">// 十进制 1</span>\n<span class="token keyword">let</span> three <span class="token operator">=</span>  <span class="token number">0b11</span><span class="token punctuation">;</span>     <span class="token comment">// 二进制 3, 0b开头</span>\n<span class="token keyword">let</span> nine <span class="token operator">=</span> <span class="token number">011</span><span class="token punctuation">;</span>        <span class="token comment">// 八进制 9, 0开头</span>\n<span class="token keyword">let</span> twenty_six <span class="token operator">=</span> <span class="token number">0x1A</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制 26, 0x开头</span>\n<span class="token comment">// 十六进制:0 1 2 3 4 5 6 7 8 9 A B C D E F 分别是 0 到 15</span>\n\n<span class="token keyword">let</span> percent90 <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>   <span class="token comment">// 浮点数 </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h6 id="数字常量和方法" tabindex="-1"><a class="header-anchor" href="#数字常量和方法" aria-hidden="true">#</a> 数字常量和方法</h6>',6),m=(0,p.Uk)("以下演示的是最基本的用法，详细用法需参考 "),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("MDN - Number"),g=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Number常量</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\n\n<span class="token comment">// Number.MIN_SAFE_INTEGER 代表在 JavaScript中最小的安全的integer型数字 (-(2**53 - 1))</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">53</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// Number.MIN_VALUE 属性表示在 JavaScript 中所能表示的最小的正值</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5e-324</span>\n\n<span class="token comment">// Number.MAX_SAFE_INTEGER 常量表示在 JavaScript 中最大的安全整数，其值为2的53次方-1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">53</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, </span>\n\n<span class="token comment">// MAX_VALUE属性值接近于1.79e+308，大于MAX_VALUE就是Infinity</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 约等于 1.79e+308</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Infinity</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -Infinity</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity,正无穷大</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -Infinity,负无穷大</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Infinity,正无穷大</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">NEGATIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -Infinity,负无穷大</span>\n\n<span class="token comment">// Number方法</span>\n\n<span class="token comment">// 1. Number.isNaN 判断值是否是NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token comment">// 如果不使用方法，那么可以判断</span>\n<span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token operator">!==</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, NaN是唯一一个不等于自身的值</span>\n\n<span class="token comment">// 2. Number.isFinite 是否是有穷数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// true</span>\n\n<span class="token comment">// 3. Number.isInteger 是否是整数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token comment">// 4. Number.parseInt和Number.parseFloat</span>\n<span class="token comment">// 全局对象上也有parseInt和parseFloat,并且和Number上的是相等的</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span>parseInt <span class="token operator">===</span> parseInt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 开头的空格会被忽略,将开头开始合法的字符串转换成数字,如果从头到尾都不合法,则返回NaN</span>\n<span class="token comment">// 第二个参数可以指定进制,默认10进制</span>\n<span class="token comment">// Number.parseInt 将字符串转换成整数,如果无法转换则返回NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;3.14 Code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 3</span>\n<span class="token comment">// Number.parseFloat 将字符串转换成整数,如果无法转换则返回NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;3.14 Code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span>\n<span class="token comment">// 转换成数字优先使用parseInt和parseFloat，而不是Number</span>\n\n<span class="token comment">// 5. toFixed()方法 转换成保留几位小数的字符串</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1024.</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1024.00&#39; </span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><h2 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> boolean</h2><p>布尔值有两个字面量，分别是true(真)和false(假)，用于表达真假</p><h6 id="布尔字面量" tabindex="-1"><a class="header-anchor" href="#布尔字面量" aria-hidden="true">#</a> 布尔字面量</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> lose <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 布尔值区分大小写，只有全小写的true/false才是布尔值</span>\n<span class="token comment">// True,False这种都不是布尔值，而是标识符</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="truthy-真值-和falsy-假值" tabindex="-1"><a class="header-anchor" href="#truthy-真值-和falsy-假值" aria-hidden="true">#</a> truthy(真值)和falsy(假值)</h6><p>和布尔值不同，真值表示会被转换成true的值,而falsy则是会被转换成false的值 目前的falsy值有<strong>undefined、null、&#39;&#39;、0、NaN以及false本身</strong>,除去falsy值，其他都是真值</p><p>注意: 任何值都有对应的布尔值,所以!!和Boolean对任何值进行转换都是可以的</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 可以通过Boolean()或者!!将值转换成true或者false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n \n<span class="token comment">// 真/假值在JS中使用非常频繁,常见有</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;真值&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">// if条件判断,真值时才会执行代码块中的代码</span>\n<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token number">80</span><span class="token punctuation">;</span>   <span class="token comment">// 逻辑运算符 &amp;&amp; 和 ||</span>\n<span class="token boolean">true</span> <span class="token operator">?</span> <span class="token string">&#39;真&#39;</span><span class="token operator">:</span> <span class="token string">&#39;假&#39;</span>             <span class="token comment">// 三元运算符</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> undefined</h2><p>undefined表示声明未定义的变量/参数的初始值,undefined类型只有一个值undefined</p><p>undefined是全局对象的属性,同时也是一个字面量</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 基本使用</span>\n<span class="token keyword">let</span> u1<span class="token punctuation">;</span> <span class="token comment">// 默认没有进行赋值就是undefined </span>\n<span class="token keyword">let</span> u2 <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 手动赋值undefined,不推荐</span>\n\n<span class="token comment">// 运算符时提及,void运算符返回undefined,平时不一定要这样写,但是如果看到要知道什么意思</span>\n<span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 访问对象上没有属性/方法</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n<span class="token comment">// 函数参数没有传值</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n<span class="token comment">// 函数没有return,默认返回undefined</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> null</h2><p>null类型只有一个值null,是一个字面量，指代一个空指针，即未设置值的对象</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> \nobj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 需要注意一点,也是面试常问</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token comment">// 原因</span>\n<span class="token comment">// 在JS中, 值是有一个表示类型的标签和实际值组成,对象的标签为000</span>\n<span class="token comment">// null表示空指针、对象无引用,其值全为0,标签也是0 (早期设计,现在无法修复)</span>\n<span class="token comment">// 而typeof是根据标签来判断的,所以typeof null返回 &#39;object&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="null-和-undefined-异同" tabindex="-1"><a class="header-anchor" href="#null-和-undefined-异同" aria-hidden="true">#</a> null 和 undefined 异同</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 相同点:</span>\n<span class="token comment">// 1. 都是falsy </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token comment">// 2. 在JS,null和undefined非严格相等</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token comment">// 3. 无妨访问属性和方法,因为无构造函数</span>\n<span class="token comment">// 前情回顾</span>\n<span class="token comment">// 3.1 null和undefined是没有构造函数的</span>\n<span class="token comment">// 3.2 基本数据类型是没有属性和方法的</span>\n<span class="token comment">// 3.3 基本数据类型能调用属性和方法是因为JS引擎使用构造函数将其转换成包装对象</span>\n<span class="token comment">// 综上所述,null和undefined没有属性和方法,不能访问,否则 类型异常:无法从null/undefined获取属性 </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError:Cannot read property &#39;title&#39; of undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError:Cannot read property &#39;title&#39; of null</span>\n\n\n<span class="token comment">// 不同点:</span>\n<span class="token comment">// 1. 含义不同</span>\n<span class="token comment">// null表示空指针、对象无引用地址,而undefined表示缺少值、未被定义的值</span>\n\n<span class="token comment">// 2. 转换成数字时,null转换成0,而undefined转换成NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\n\n<span class="token comment">// 3. null是一个字面量(值),而undefined既是全局的一个属性,也是字面量</span>\n<span class="token comment">// 可以通过赋值检验</span>\n<span class="token keyword">null</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError:Invalid left-hand side in assignment - 语法异常:等号左侧不合法</span>\n<span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 正常运行,不过undefined无法被修改</span>\n\n<span class="token comment">// 4. 是否会赋值默认值</span>\n<span class="token comment">// null不会赋默认值，而undefined会赋默认值,因为默认不传递参数时，就是undefined</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">num <span class="token operator">=</span> <span class="token number">1024</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 1024是默认值,当num为undefined时赋值</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div>',18),f={id:"symbol",tabindex:"-1"},y=(0,p._)("a",{class:"header-anchor",href:"#symbol","aria-hidden":"true"},"#",-1),h=(0,p.Uk)(" Symbol "),v=(0,p.uE)('<p>symbol是ES6新增的基本数据类型,表示唯一不重复的值, 使用Symbol函数创建Symbol类型的值,主要用来解决JS对象属性名都是字符串、容易出现属性名冲突的问题 symbol接收字符串，非字符串的值会先被转换成字符串，再创建Symbol值</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 基本使用</span>\n<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;des&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 接受一个描述信息</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//des, 获取Symbol的描述信息,ES2019新增</span>\n\n<span class="token comment">// 2. Symbol每次调用都会创建一个新的Symbol,描述只是利于区分，描述相同也不是同一个值</span>\n<span class="token keyword">const</span> foo1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> foo2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo1 <span class="token operator">===</span> foo2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token comment">// Symbol不是一个完整的构造函数,不支持new关键字,所以也没有对应的包装对象</span>\n<span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Symbol is not a constructor - 类型异常: Symbol不是一个构造函数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="symbol类型转换" tabindex="-1"><a class="header-anchor" href="#symbol类型转换" aria-hidden="true">#</a> Symbol类型转换</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 使用构造函数是显式类型转换，使用运算符进行运算时，是隐式类型转换</span>\n<span class="token comment">// Symbol只能</span>\n<span class="token comment">// 2. Symbol只能显式转换成 String和Boolean</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;Symbol()&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// TypeError: Cannot convert a Symbol value to a number - 类型异常: 无法将Symbol转换成number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="作为属性名" tabindex="-1"><a class="header-anchor" href="#作为属性名" aria-hidden="true">#</a> 作为属性名</h3>',6),S=(0,p.Uk)("Symbol的主要用途是作为对象的key,避免属性名冲突,一般搭配[]使用,需要理解"),j=(0,p.Uk)("对象 - Object"),w=(0,p.Uk)("。"),N=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. symbol作为key的设置和读取 </span>\n<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 使用[]将symbol作为key</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;Symbol - 1&#39;</span><span class="token punctuation">,</span>  s1<span class="token operator">:</span> <span class="token string">&#39;String&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">[</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Symbol - 2&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用Object.defineProperty设置</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> s3<span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;Symbol - 3&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 获取的话也使用[]获取</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// String,使用.运算符获取的是key为&#39;s1&#39;的字符串对应的值 </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol - 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol - 2</span>\n\n<span class="token comment">// 注意</span>\n<span class="token comment">// 1. Symbol作为属性名无法通过Object.getOwnPropertyNames获取</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>\n\n<span class="token comment">// 2. for .. in .. 遍历时,获取不到symbol的key</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s1</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 3. 可以通过Object.getOwnPropertySymbols获取</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ Symbol(), Symbol(), Symbol() ]</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="symbol-keyfor和symbol-for" tabindex="-1"><a class="header-anchor" href="#symbol-keyfor和symbol-for" aria-hidden="true">#</a> Symbol.keyFor和Symbol.for</h3><p>有时我们也需要使用到相同的Symbol,JS也为我们提供了相应的机制</p><p>JS存在一个全局symbol注册表,Symbol.for方法会在注册表中进行注册,如果注册表中已经存在该描述注册的Symbol,则直接使用,否则会创建。</p><p>Symbol.keyFor 获取全局symbol注册表中的symbol对应的描述,如果不在注册表中,则返回undefined</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. Symbol.for</span>\n<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;des&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每次Symbol调用都会创建一个新的symbol</span>\n<span class="token keyword">const</span> s1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;des&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用des创建一个Symbol并登记到注册表</span>\n<span class="token keyword">const</span> s2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;des&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// des创建的symbol已经存在,无需创建直接使用,所以 s1 === s2</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token operator">===</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">//总结:使用Symbol.for并且描述相同的Symbol是同一个symbol</span>\n\n<span class="token comment">// 2. Symbol.keyFor 获取注册表中的symbol对应的描述</span>\n<span class="token keyword">const</span> sDes <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sDes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined, Symbol()的方式不会在注册表登记,所以返回undefined</span>\n\n<span class="token keyword">const</span> s1Des <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1Des<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// des</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="实用内置symbol" tabindex="-1"><a class="header-anchor" href="#实用内置symbol" aria-hidden="true">#</a> 实用内置Symbol</h3>',7),x=(0,p.Uk)("ECMAScript除了可以自定义Symbol以外,还提供了内置Symbol值,以Symbol的静态属性形式存在,以下列举部分比较有意思的Symbol值,详细可参考 "),I={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("MDN - Symbol"),_=(0,p.uE)('<h6 id="symbol-hasinstance" tabindex="-1"><a class="header-anchor" href="#symbol-hasinstance" aria-hidden="true">#</a> Symbol.hasInstance</h6><p>判断对象是否是构造函数的实例,作用于构造函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Arr</span><span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// instance是接收的实例</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// arr是Arr构造函数new出来的,正常来说arr instanceof Arr应该是true</span>\n<span class="token comment">// 但是我们通过 Symbol.hasInstance改变的判断结果,所以返回了false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h6 id="symbol-toprimitive" tabindex="-1"><a class="header-anchor" href="#symbol-toprimitive" aria-hidden="true">#</a> Symbol.toPrimitive</h6><p>在对象转换成基本数据类型时调用,可以控制对象转换成基本数据类型的结果,转换成boolean不会触发,优先级Symbol.toPrimitive &gt; valueOf &gt; toString</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// [object Object]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// [object Object] </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [object Object]</span>\n\nobj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">hint</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// hint是会被转换成什么类型,共有3个取值</span>\n  <span class="token comment">// 通过+和Number()转换成number时,hint为number</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>hint <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n  <span class="token comment">// 通过String()和模板字符串类型转换时,hint为string</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>hint <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;primitive&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// 通过和字符串进行拼接 &#39;&#39;+ , hint为default</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>hint <span class="token operator">===</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// +会先将对象转换成基本数据类型 - 默认是字符串</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 1024, hint - number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1024, hint - number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// primitive, hint - string</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// primitive, hint - string</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true, hint - default</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h6 id="symbol-tostringtag" tabindex="-1"><a class="header-anchor" href="#symbol-tostringtag" aria-hidden="true">#</a> Symbol.toStringTag</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 调用toString()方法会打印出 [object tag]形式的字符串,Symbol.toStringTag就是这个tag</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Object]</span>\nobj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;MyObject&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[object MyObject]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="symbol-iterator" tabindex="-1"><a class="header-anchor" href="#symbol-iterator" aria-hidden="true">#</a> Symbol.iterator</h6><p>为对象定义迭代器,可以使用for..of..遍历, 对象默认是不能遍历的,而数组和字符串是有默认的迭代器的,可参考<a href="">迭代器 - iterator</a></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Marco&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;AD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 为对象hero设置迭代器</span>\nhero<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> hero<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 有了迭代器就可以被for..of..遍历了</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 ,  2 , 3</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h6 id="symbol-isconcatspreadable" tabindex="-1"><a class="header-anchor" href="#symbol-isconcatspreadable" aria-hidden="true">#</a> Symbol.isConcatSpreadable</h6><p>控制数组和类数组对象作为Array.prototype.concat()的参数时,是否可以展开</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> oddNums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> odd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nodd<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\noddNums <span class="token operator">=</span> oddNums<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">;</span>  \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oddNums<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [ [1,3,5,7] ], odd没有被展开,整个数组作为一个值拼接到nums</span>\n\n<span class="token keyword">let</span> evenNums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> even <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nevenNums <span class="token operator">=</span> evenNums<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenNums<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [2,4,6,8], even被展开进行拼接</span>\n\n<span class="token comment">// 类数组对象,即有着和数组同样结构的对象,数字字符串的key以及length</span>\n<span class="token comment">// 默认情况下,类数组是不能展开的</span>\n<span class="token keyword">const</span> likeArrayObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>\n  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span>\n  length<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 可以注释这行 来观察nums的值</span>\nlikeArrayObj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> \n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>likeArrayObj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;0&#39;, &#39;1&#39;],如果没有设置可以展开则是[ { &#39;0&#39;: &#39;0&#39;, &#39;1&#39;: &#39;1&#39;, length: 2 } ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>',14),O={id:"bigint",tabindex:"-1"},A=(0,p._)("a",{class:"header-anchor",href:"#bigint","aria-hidden":"true"},"#",-1),B=(0,p.Uk)(" BigInt "),C=(0,p.uE)('<p>BigInt是ES10新增的基本数据类型,可以表示的数字的范围没有限制,即任意大的数字都可以使用BigInt表示</p><h6 id="基本使用-1" tabindex="-1"><a class="header-anchor" href="#基本使用-1" aria-hidden="true">#</a> 基本使用</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token number">1024n</span><span class="token punctuation">;</span> <span class="token comment">// 在数字后加n,就是BigIn的类型</span>\n<span class="token keyword">let</span> code2 <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&#39;1024&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用构造函数将数字或者字符串数字转换成BigInt</span>\n\n<span class="token comment">// 注意:BitInt无法隐式类型转换成Number,但是可以隐式转换成String、Boolean</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024, Number()是显式转换</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">1024n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BigInt可以通过parseInt转换成Number</span>\n\n<span class="token comment">// BigInt无法和number进行操作,因为它无法隐式转换成Number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError:Cannot convert a BigInt value to a number - 类型异常: 无法将BigInt转换成Number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError:Cannot mix BigInt and other types, use explicit conversions - 类型异常: 不能将BigInt和其他类型混合使用,请使用显式转换</span>\n\n<span class="token comment">// BigInt和Symbol一样,构造函数(不完整)只具备转换类型的作用,不能使用new关键字新建实例</span>\n<span class="token keyword">const</span> bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInt</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// TypeError:BigInt is not a constructor  - 类型异常: BigInt不是一个构造函数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h6 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h6><p>BigInt和number不能隐式转换，意味着不能直接进行运算,但是比较是可以直接进行比较的</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1024n</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// BigInt和Number不严格相等</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0n</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0n</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="无法序列化" tabindex="-1"><a class="header-anchor" href="#无法序列化" aria-hidden="true">#</a> 无法序列化</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  num<span class="token operator">:</span> <span class="token number">1024n</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError:Do not know how to serialize a BigInt - 类型错误: 不知道如何序列化BigInt</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',8),T={},M=(0,a(3744).Z)(T,[["render",function(n,s){const a=(0,p.up)("Badge"),T=(0,p.up)("OutboundLink"),M=(0,p.up)("RouterLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("h6",e,[o,c,(0,p.Wm)(a,{text:"ES6"})]),l,(0,p._)("p",null,[u,(0,p._)("a",i,[r,(0,p.Wm)(T)])]),k,(0,p._)("p",null,[m,(0,p._)("a",b,[d,(0,p.Wm)(T)])]),g,(0,p._)("h2",f,[y,h,(0,p.Wm)(a,{text:"ES6"})]),v,(0,p._)("p",null,[S,(0,p.Wm)(M,{to:"/javascript/data-type/object.html"},{default:(0,p.w5)((()=>[j])),_:1}),w]),N,(0,p._)("p",null,[x,(0,p._)("a",I,[E,(0,p.Wm)(T)])]),_,(0,p._)("h2",O,[A,B,(0,p.Wm)(a,{text:"ES10"})]),C],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);