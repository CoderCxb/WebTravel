"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[8157],{8940:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5fd8a6d8",path:"/javascript/function.html",title:"函数",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"定义函数",slug:"定义函数",children:[{level:3,title:"函数声明",slug:"函数声明",children:[]},{level:3,title:"函数表达式",slug:"函数表达式",children:[]},{level:3,title:"构造函数",slug:"构造函数",children:[]},{level:3,title:"函数声明提升",slug:"函数声明提升",children:[]},{level:3,title:"函数返回值",slug:"函数返回值",children:[]}]},{level:2,title:"函数内部对象",slug:"函数内部对象",children:[{level:3,title:"arguments",slug:"arguments",children:[]},{level:3,title:"new.targe",slug:"new-targe",children:[]}]},{level:2,title:"函数参数",slug:"函数参数",children:[{level:3,title:"理解参数",slug:"理解参数",children:[]},{level:3,title:"浅拷贝",slug:"浅拷贝",children:[]},{level:3,title:"参数默认值",slug:"参数默认值",children:[]},{level:3,title:"扩展参数与剩余参数",slug:"扩展参数与剩余参数",children:[]}]},{level:2,title:"IIFE",slug:"iife",children:[{level:3,title:"匿名函数",slug:"匿名函数",children:[]},{level:3,title:"理解",slug:"理解",children:[]}]},{level:2,title:"箭头函数",slug:"箭头函数",children:[{level:3,title:"使用方式",slug:"使用方式",children:[]},{level:3,title:"箭头函数特点",slug:"箭头函数特点",children:[]},{level:3,title:"应用",slug:"应用",children:[]}]},{level:2,title:"this指向",slug:"this指向",children:[{level:3,title:"为什么用this",slug:"为什么用this",children:[]},{level:3,title:"绑定规则",slug:"绑定规则",children:[]}]},{level:2,title:"递归和尾调用优化",slug:"递归和尾调用优化",children:[{level:3,title:"递归",slug:"递归",children:[]},{level:3,title:"尾调用优化",slug:"尾调用优化",children:[]}]},{level:2,title:"柯里化",slug:"柯里化",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"javascript/function.md",git:{updatedTime:1649356467e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:2},{name:"chenxiaobin",email:"chenxiaobin@chenxiaobindeMacBook-Pro.local",commits:1}]}}},5039:(n,s,a)=>{a.r(s),a.d(s,{default:()=>_});var p=a(6252);const t=(0,p.uE)('<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><p>函数是指一段可以直接被另一段程序或代码引用的程序或代码,在Javascript中,函数同时也是对象,它是Function构造函数的实例,同其他引用数据类型一样,有自己的方法和属性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 无论是通过函数声明还是函数表达式定义的函数,都是Function和Object的实例,即它是对象</span>\n<span class="token keyword">function</span> <span class="token function">run</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>run <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>run <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>run<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// run, 函数名</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sing <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sing <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sing<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sing, 函数名</span>\n\n<span class="token comment">// 即然函数是对象、引用数据类型,那么赋值的就是引用了</span>\n<span class="token keyword">const</span> sing2 <span class="token operator">=</span> sing<span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sing <span class="token operator">===</span> sing2<span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sing2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sing, 函数名 </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数" aria-hidden="true">#</a> 定义函数</h2><p>界定是函数声明还是函数表达式主要是根据函数定义出现的位置,函数声明是语句,而函数表达式顾名思义,是表达式,出现在语句位置的是函数声明,出现在表达式位置的是函数表达式。<a href="TODO"> 语句 - 表达式 </a></p><h3 id="函数声明" tabindex="-1"><a class="header-anchor" href="#函数声明" aria-hidden="true">#</a> 函数声明</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 函数声明的形式 - function 函数名(参数列表){函数体}</span>\n<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">who<span class="token punctuation">,</span>doing</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>who <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">+</span> doing<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token comment">/* 函数声明结尾不需要分号(;) */</span>\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;Jim&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;running&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jim is running</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="函数表达式" tabindex="-1"><a class="header-anchor" href="#函数表达式" aria-hidden="true">#</a> 函数表达式</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">who<span class="token punctuation">,</span>doing</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>who <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">+</span> doing<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;singing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tom is singing</span>\n\n<span class="token comment">// 箭头函数的函数表达式</span>\n<span class="token keyword">const</span> <span class="token function-variable function">play</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">who<span class="token punctuation">,</span>doing</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>who <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">+</span> doing<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">play</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;playing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack is playing</span>\n\n<span class="token comment">// 如果函数表达式有名称,那么只是赋值引用,函数名不变</span>\n<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: test]</span>\n\n<span class="token comment">// 如果函数表达式没有名称,那么除了赋值引用外,还会将变量名作为函数名</span>\n<span class="token keyword">const</span> <span class="token function-variable function">cb</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cb</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: cb]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h3><p>一般情况很少使用构造函数定义函数,因为构造函数方式的代码会执行两次,第一次将其看作普通的JS代码执行,第二次会解析传递给构造函数的字符串,影响性能。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// coding函数接受参数who和doing</span>\n<span class="token keyword">const</span> coding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;who&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;doing&#39;</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.log(who + &quot; is &quot; + doing)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 最后一个参数是函数体,前面的所有参数都是参数名</span>\n<span class="token comment">// 这里的Marco就是参数who, coding就是参数doing</span>\n<span class="token function">coding</span><span class="token punctuation">(</span><span class="token string">&#39;Marco&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;coding&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Marco is coding</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="函数声明提升" tabindex="-1"><a class="header-anchor" href="#函数声明提升" aria-hidden="true">#</a> 函数声明提升</h3><p>函数声明和函数表达式的主要区别在于,JS引擎执行时,会先读取函数声明并定义函数,所以即便在函数声明前调用了函数,依旧可以执行,即函数声明提升,而函数表达式是将函数的引用赋值给变量,只有赋值成功以后才可以调用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在函数声明前调用依旧有效</span>\n<span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// I&#39;m studying</span>\n<span class="token keyword">function</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I&#39;m studying</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 函数表达式无法在赋值前使用</span>\n<span class="token comment">// 即便使用了var变量声明提升了,\b但是还没有赋值,此时的sleep是undefined,无法调用</span>\n<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: sleep is not a function - 类型异常: sleep不是一个函数</span>\n<span class="token keyword">var</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I&#39;m sleeping</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="函数返回值" tabindex="-1"><a class="header-anchor" href="#函数返回值" aria-hidden="true">#</a> 函数返回值</h3><p>函数可以通过return语句返回一个执行结果(返回值 - 可以是任意类型,包括函数),即使没有手写return语句,函数也会有默认的返回值 - undefined。</p><p>注意: 函数执行return语句会结束函数执行,即函数体中return后面的代码不会执行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 调用函数返回参数和,此时是需要返回值的</span>\n<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 返回值为三数之和</span>\n  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> n3<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after return&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数return后面\b的代码不会执行</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n\n<span class="token comment">// hello函数只是为了打印&#39;hello world&#39;,并不需要返回什么东西,所以不用写return</span>\n<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 函数体中无return语句</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="函数内部对象" tabindex="-1"><a class="header-anchor" href="#函数内部对象" aria-hidden="true">#</a> 函数内部对象</h2><h3 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> arguments</h3><p>arguments是一个类数组对象,包含调用函数时传递的所有参数,箭头函数没有arguments。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 1. arguments以类数组的形式存储函数调用传递的参数 </span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Arguments] { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3 }</span>\n\n  <span class="token comment">// 2. arguments调用toString方法打印类型是 [object Arguments]</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Arguments]</span>\n\n  <span class="token comment">// 3. arguments上的length表示的就是参数数量</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n\n  <span class="token comment">// 4. arguments.callee表示函数本身,严格模式下会报错,开发中用的很少</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: sum]</span>\n\n  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> n3<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="arguments行为不稳定" tabindex="-1"><a class="header-anchor" href="#arguments行为不稳定" aria-hidden="true">#</a> arguments行为不稳定</h4><p>arguments的行为在非严格模式下不一致,避免在非严格模式下使用arguments。</p><h6 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式" aria-hidden="true">#</a> 严格模式</h6><p>默认参数、剩余参数以及解构赋值的存在不会对arguments有影响</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> \n  <span class="token comment">// 修改第一个参数,arguments不受影响</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Arguments] { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3 }</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h6 id="非严格模式" tabindex="-1"><a class="header-anchor" href="#非严格模式" aria-hidden="true">#</a> 非严格模式:</h6><ul><li>存在默认参数、剩余参数以及解构赋值: 参数改变不影响arguments</li><li>不存在默认参数、剩余参数以及解构赋值: 参数改变,arguments跟随改变</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 有剩余参数、默认参数和解构赋值其中一个</span>\n<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter">n1 <span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">,</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>chars</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n  n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> \n  <span class="token comment">// 修改第一个参数,arguments不受影响</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Arguments] { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3 }</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;obj&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 没有剩余参数、默认参数和解构赋值</span>\n<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> \n  <span class="token comment">// 修改第一个参数,arguments受影响</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Arguments] { &#39;0&#39;: 100, &#39;1&#39;: 2, &#39;2&#39;: 3 }</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',31),e={id:"new-targe",tabindex:"-1"},o=(0,p._)("a",{class:"header-anchor",href:"#new-targe","aria-hidden":"true"},"#",-1),c=(0,p.Uk)(" new.targe "),l=(0,p.uE)('<p>ES6新增了new.target用于检测函数调用是否使用了new关键字,使用了new,那么new.target就是被调用的构造函数,否则new.target就是undefined。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined, 不使用new调用,new.target为undefined</span>\n<span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: Person], 使用new,则new.target为该构造函数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h2><p>函数参数可以理解成调用时在()中定义变量存储传递的数据(此时变量上就有传递进来的数据了),然后这些变量只能在函数体中使用。</p><h3 id="理解参数" tabindex="-1"><a class="header-anchor" href="#理解参数" aria-hidden="true">#</a> 理解参数</h3><h6 id="函数明明可以拿到函数外的变量-直接获取不就行了-为什么要通过参数传递的形式呢" tabindex="-1"><a class="header-anchor" href="#函数明明可以拿到函数外的变量-直接获取不就行了-为什么要通过参数传递的形式呢" aria-hidden="true">#</a> 函数明明可以拿到函数外的变量,直接获取不就行了,为什么要通过参数传递的形式呢？</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 这个变量的作用域是块级,外部无法访问</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 如果要打印不同的值,就得不断的修改str</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// console.log(num); // 访问不到num变量</span>\n<span class="token punctuation">}</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>原因</strong>:</p><ul><li>变量都有作用域,你无法保证你要访问的变量在函数调用的位置能够访问到</li><li>访问外部变量,需要在外部创建变量,会污染外部的环境,导致外部环境变量繁多,难以维护</li><li>函数具有自己的作用域,外部作用域无法访问到函数内的变量,所以可以有效的减少命名冲突的问题</li><li>函数可以根据传递的不同参数表现出不同的行为,访问外部的变量很难做到这点(需要不断的修改该变量)</li></ul><p><strong>使用函数参数</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hi</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="什么时候需要参数" tabindex="-1"><a class="header-anchor" href="#什么时候需要参数" aria-hidden="true">#</a> 什么时候需要参数？</h6><p>当函数的行为是动态的,即需要根据参数表现不同行为时,需要传入参数控制行为,开发时根据自身需要决定是否需要参数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 这个函数不管怎么调用 打印的都是hello</span>\n<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>\n\n<span class="token comment">// 可以根据传递的参数表现出不同的行为</span>\n<span class="token keyword">function</span> <span class="token function">sayHiTo</span><span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hi,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>who<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">sayHiTo</span><span class="token punctuation">(</span><span class="token string">&#39;Marco&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hi,Marco</span>\n<span class="token function">sayHiTo</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hi,Jack</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h3><p>一定一定要记住一点,参数是浅拷贝的,在接收引用数据类型时,需要注意这点,避免修改引发的意料之外的bug,参考<a href="TODO">浅拷贝</a>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Marco&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">changeName</span> <span class="token punctuation">(</span><span class="token parameter">stu</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 这里的stu指向的还是外部student的引用,所以现在修改会影响student</span>\n  stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 此处将stu的引用修改掉了,那么它指向的是{},而不是原本的student,所以修改不会影响student</span>\n  stu <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tom - &#39;</span><span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tom -  { name: &#39;Tom&#39; }</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 内部的stu其实就是student的引用,两个变量指向的是同一个引用,所以内部修改会影响外部</span>\n<span class="token function">changeName</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Jack - &#39;</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack -  { name: &#39;Jack&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="参数默认值" tabindex="-1"><a class="header-anchor" href="#参数默认值" aria-hidden="true">#</a> 参数默认值</h3><p>在Javascript中,定义了两个参数并不是说一定要传递两个参数,参数个数对不上也不会报错,如果没有接收到传入的参数,则默认值是undefined,也可以设置默认值,在没有传递参数或者参数值为undefined时会使用我们设置的默认值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 参数定义了,但是没有传递,默认是undefined</span>\n<span class="token comment">// 注意:()中的定义变量是有序的,如content定义的时候,content2还没定义,所以可以后面的参数访问前面的参数,而不能前面的参数访问后面的参数\\</span>\n<span class="token comment">// ()中无法访问函数体内的变量</span>\n<span class="token comment">// 写成 content = content2, content2 = &#39;Fuction Params&#39; 是不行的,会报错</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">&#39;Fn&#39;</span><span class="token punctuation">,</span> content <span class="token operator">=</span> <span class="token string">&#39;Fuction Params&#39;</span><span class="token punctuation">,</span> content2 <span class="token operator">=</span> content<span class="token punctuation">,</span>author <span class="token operator">=</span> <span class="token string">&#39;ME&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 第一个参数是&#39;Function&#39;, 不是undefined,不使用默认值</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Function</span>\n\n  <span class="token comment">// 第二个参数显式传递了一个undefined,使用默认值</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Fuction Params</span>\n\n  <span class="token comment">// 第三个参数没有传递,默认是undefined,而默认值是content(也就是和第二个参数相等)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Fuction Params</span>\n\n  <span class="token comment">// 第四个参数没有传递,默认是undefined,默认值是&#39;ME&#39;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ME</span>\n\n  <span class="token comment">// arguments中存放的是调用函数传递的数据,不受默认值设置的影响</span>\n  <span class="token comment">// 可以看到,默认值并没有在arguments中生效</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Arguments] { &#39;0&#39;: &#39;Function&#39;, &#39;1&#39;: undefined }</span>\n\n  <span class="token comment">// 参数定义类似于let和const, 所以在函数体内存在暂时性死区,无法再声明与参数同名的变量</span>\n  <span class="token comment">// let title = &#39;JS&#39;; // SyntaxError: Identifier &#39;title&#39; has already been declared - 语法异常: 标识符&#39;title&#39;已经声明了</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&#39;Function&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="扩展参数与剩余参数" tabindex="-1"><a class="header-anchor" href="#扩展参数与剩余参数" aria-hidden="true">#</a> 扩展参数与剩余参数</h3><h4 id="扩展参数" tabindex="-1"><a class="header-anchor" href="#扩展参数" aria-hidden="true">#</a> 扩展参数</h4><p>当函数接收多个参数,而这些参数来自数组,如果不使用扩展参数,一个个传很繁琐,这时候就可以使用扩展参数来简化操作。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> n3<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 现在想要将nums的三个元素传递给sum</span>\n<span class="token comment">// 1. 最笨的传法 - 不扩展参数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n\n<span class="token comment">// 扩展参数</span>\n<span class="token comment">// 2. apply不仅可以改变this的指向而且接受的是数组形式的参数列表,也可以用来展开参数</span>\n<span class="token comment">// 具体用法在this指向部分,此处只要知道它能调用函数并传递数组形式的参数即可</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n\n<span class="token comment">// 3. ES6提供的扩展运算符,可以将数组展开成多个值</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="剩余参数" tabindex="-1"><a class="header-anchor" href="#剩余参数" aria-hidden="true">#</a> 剩余参数</h4><p>剩余参数类似于arguments,arguments将参数整合到类数组对象,而剩余参数则是将参数整合到一个数组(如果没有接收到参数,则是[])。由于剩余参数会接收后续的所有参数,所以它必须作为最后一个参数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">operatorFn</span> <span class="token punctuation">(</span><span class="token parameter">operator<span class="token punctuation">,</span> <span class="token operator">...</span>nums</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 第一个参数为操作符,决定使用加法还是乘法</span>\n  <span class="token comment">// 第二个参数为剩余参数,通过...接收后续的所有参数作为数组,此处作为加数或者乘数</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4, 5 ]</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>operator <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 使用reduce返回数组的和</span>\n    <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>operator <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 使用reduce返回数组的乘积</span>\n    <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">*</span> cur<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 此处使用扩展运算符将数组展开传入</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">operatorFn</span><span class="token punctuation">(</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">operatorFn</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 120</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="iife" tabindex="-1"><a class="header-anchor" href="#iife" aria-hidden="true">#</a> IIFE</h2><p>IIFE(Immediately Invoked Function Expression,立即执行的函数表达式),使用括号运算符返回函数表达式(常见形式),并立即执行。</p><p>解析: IIFE并不是一定要用(),只是因为这个写法最为简单,IIFE也叫做<strong>立即执行的函数表达式</strong>,这个名称其实更贴切,首先是立即执行,然后是函数表达式,这便是IIFE的主要特点,所以能够满足这两点就是IIFE。</p><p>优点:</p><ul><li>IIFE具有独立的作用域,既不污染全局环境,外部环境也无法访问IIFE中的变量。</li><li>立即执行,不创建引用,所以在垃圾回收时会被回收。</li></ul><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h3><p>匿名函数就是没有函数名的函数,并且匿名函数必定是函数表达式,因为函数声明必须有函数名。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 匿名函数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function (anonymous)]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function (anonymous)]</span>\n\n<span class="token comment">// 具名函数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: fn]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="理解" tabindex="-1"><a class="header-anchor" href="#理解" aria-hidden="true">#</a> 理解</h3><ul><li>在语句位置出现的函数定义是函数声明,在表达式位置出现的是函数表达式</li><li>函数声明不能直接调用,函数表达式可以直接调用</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 复习一下括号运算符,括号运算符会返回最后一个元素,并且()中的元素都是表达式</span>\n<span class="token keyword">const</span> last <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n\n<span class="token comment">// 2. 将函数表达式的引用赋值给变量</span>\n<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 3. 为什么不能直接写function(){}()? 因为直接写function(){},位置是在语句位置,被识别成了函数声明,函数声明不能立即调用</span>\n<span class="token keyword">function</span> <span class="token function">t</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 出现在语句位置,是函数声明</span>\n\n<span class="token comment">// 4. 括号运算符中必是表达式,不是表达式会报错,可以试试在()中写return,会报错,()中只能是表达式</span>\n<span class="token comment">// 因此将function(){}()使用()包裹, 就会被当成函数表达式,从而可以立即执行</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// !</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 5. 函数调用可以放在外部调用,只要function(){}函数定义这部分在()中被识别成函数表达式就可以了</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// !</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 根据定义可以有别的写法,不过一般还是用()</span>\n<span class="token comment">// 同理可得</span>\n<span class="token keyword">void</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// !</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// !</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这也是立即执行的函数表达式</span>\n\n<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// !</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div>',38),u={id:"箭头函数",tabindex:"-1"},i=(0,p._)("a",{class:"header-anchor",href:"#箭头函数","aria-hidden":"true"},"#",-1),r=(0,p.Uk)(" 箭头函数 "),k=(0,p.uE)('<p>箭头函数是ES6新增的定义函数表达式的方式,语法较于function定义更加简洁,但也和function定义的函数表达式有一些区别。</p><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 不省略、完整的箭头函数形式如下</span>\n<span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2 <span class="token punctuation">,</span>n3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get sum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> n3<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. 只有单个参数时,()可以省略,无参数和多参数时,()不能省略</span>\n<span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 3. 只有返回值时, {}可以省略</span>\n<span class="token keyword">const</span> <span class="token function-variable function">fn3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 4. 只有返回值并且是对象,可以使用括号运算符()</span>\n<span class="token keyword">const</span> <span class="token function-variable function">fn4</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;Func&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 5. 立即执行的匿名函数</span>\n<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Nice&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Nice</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="箭头函数特点" tabindex="-1"><a class="header-anchor" href="#箭头函数特点" aria-hidden="true">#</a> 箭头函数特点</h3>',4),m=(0,p._)("li",null,"没有arguments",-1),b=(0,p.Uk)("因为没有[[Construct]]内部方法,无法作为构造函数,因此不需要prototype属性(作为实例对象的原型)并且不能用new调用,也就不会有new.target了 "),d=(0,p.Uk)("原型链"),g=(0,p._)("li",null,"super仅在构造函数中存在, 箭头函数不能作为构造函数,自然也是没有的",-1),h=(0,p._)("li",null,"不绑定this,箭头函数的this是自身作用域的上一层的this,不适合作为对象上的方法(参考this指向部分)",-1),f=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 在node环境中不会报错,因为node全局环境内部有一个arguments的变量,所以打印的是node的arguments,而不是函数的</span>\n  <span class="token comment">// 在浏览器环境会报错,本质上就是因为箭头函数是没有arguments的</span>\n  <span class="token comment">// console.log(arguments); // ReferenceError: arguments is not defined - 引用异常: arguments未定义</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 箭头函数没有prototype,但是有 __proto__属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>\n<span class="token comment">// 获取原型的方法获取的是箭头函数的__proto__属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n \n<span class="token comment">// 无法作为构造函数,也无法使用new关键字,更不会有new.target和super</span>\n<span class="token comment">// new fn(); // TypeError: fn is not a constructor - 类型异常: fn不是一个构造函数</span>\n\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  <span class="token comment">// 无法使用箭头函数作为构造函数,所以箭头函数不会有super</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 列举几个简单的应用场景增加记忆</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 求和</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>acc<span class="token operator">+</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>\n\n<span class="token comment">// 筛选偶数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, 4 ]</span>\n\n<span class="token comment">// 数组每项乘2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, 4, 6, 8, 10 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="this指向" tabindex="-1"><a class="header-anchor" href="#this指向" aria-hidden="true">#</a> this指向</h2><p>英文中this是一个代词,在JS中this是一个隐式传递的引用指向,通过this的机制可以使代码更简洁,避免显式传递上下文对象导致代码难以维护,<strong>this的指向由函数的调用方式决定</strong>。</p><h3 id="为什么用this" tabindex="-1"><a class="header-anchor" href="#为什么用this" aria-hidden="true">#</a> 为什么用this</h3><p>主要是可以避免频繁的参数传递,尤其是在对象/实例的方法中,this的使用频率会很高。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用this的形式,谁调用,默认this就是谁,可以复用</span>\n<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is running~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> marco <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Marco&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 1. 使用对象的方式虽然可以不需要传递参数,但是这个函数(方法)就被限定死了,无法复用,意味着别的对象无法直接使用这个方法</span>\n  <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>marco<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is studying~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 2. 通过传递参数的方式,缺点显而易见,需要传递参数,参数越多越繁琐,也难以维护</span>\n  <span class="token function">code</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>person<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is coding~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 3. 使用this的形式,this默认指向调用者</span>\n  run\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 执行结果</span>\nmarco<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Marco is studying~</span>\nmarco<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span>marco<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Marco is coding~</span>\n\n<span class="token comment">// marco调用,this指向marco</span>\nmarco<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Marco is running~</span>\n\n<span class="token comment">// jack也有run方法,并且和marco的是同一个方法, 方法复用了</span>\n<span class="token keyword">const</span> jack <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// run可以复用</span>\n  run\n<span class="token punctuation">}</span>\n\n<span class="token comment">// jack调用,this就是jack</span>\njack<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="绑定规则" tabindex="-1"><a class="header-anchor" href="#绑定规则" aria-hidden="true">#</a> 绑定规则</h3><p>首先记住一点,<strong>this指向由函数的调用方式决定</strong>,接下来将会对this的绑定规则进行分析,分析时需要顺着函数的调用链找到函数的调用位置,并根据函数的调用方式判断函数的中的this指向。</p><h4 id="默认绑定" tabindex="-1"><a class="header-anchor" href="#默认绑定" aria-hidden="true">#</a> 默认绑定</h4><p>默认绑定又称为独立函数调用,是函数默认情况下的this绑定,当其他规则没有生效的情况下应用,严格模式下默认绑定的this为undefined。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 不使用关键字定义的变量,默认会被挂载在全局对象(浏览器为window,node为global)</span>\n<span class="token comment">// &#39;use strict&#39;  // 打开注释,就是严格模式了</span>\nnum <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nfn<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 此处函数是以独立调用的形式(其实就是直接调用),采用默认绑定规则,所以函数中的this指向全局对象,而不是函数本身</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="隐式绑定" tabindex="-1"><a class="header-anchor" href="#隐式绑定" aria-hidden="true">#</a> 隐式绑定</h4><p>当函数作为对象的方法调用时,应用隐式绑定规则,此时的this为调用函数的对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> marco <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;marco&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 通过对象调用时,函数中的this为调用函数的对象</span>\nmarco<span class="token punctuation">.</span><span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// marco</span>\n\n<span class="token comment">// 隐式绑定丢失</span>\n<span class="token comment">// 但是, 将函数引用赋值给一个变量之后再调用,应用的是默认绑定规则</span>\n<span class="token keyword">const</span> logName <span class="token operator">=</span> marco<span class="token punctuation">.</span>logName<span class="token punctuation">;</span>\n<span class="token comment">// 此处的this规则为默认绑定, 因为调用方式并不是通过对象调用的,而是对函数直接调用,所以是默认绑定</span>\n<span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span>\n\n<span class="token comment">// 注意,函数参数传递本质上是浅拷贝,也是赋值,所以这里的callback仅仅是函数的引用</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里才是真正的调用方式,可以看出来,是独立调用(直接调用),所以函数中的this指向全局对象</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 虽然这里看起来好像是对象调用,但是这里只是传递引用并没有调用,判断规则是要看调用方式的</span>\n<span class="token function">fn</span><span class="token punctuation">(</span>marco<span class="token punctuation">.</span>logName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span>\n\n<span class="token comment">// 理解: 函数本身并不在对象上, 对象上有的也仅仅是函数的引用罢了,本质上还是要看调用的方式是否是通过对象调用。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h6 id="举一反三" tabindex="-1"><a class="header-anchor" href="#举一反三" aria-hidden="true">#</a> 举一反三</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  num<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n  <span class="token function">logNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">logThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> num<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>callback <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 通过对象调用, this为obj</span>\n  obj<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>\n  <span class="token comment">// 直接调用, this为全局对象</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">useCallback</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>logNum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// 此处的this为Timeout对象,也很好理解,之前说过,看调用的方式,这里明显不是调用的位置,只是传递函数(引用)</span>\n<span class="token comment">// 而this指向由调用方式决定,虽然无法确定setTimeout中是怎么调用的,但是肯定不是直接调用</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>logThis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Timeoout {....}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="显式绑定" tabindex="-1"><a class="header-anchor" href="#显式绑定" aria-hidden="true">#</a> 显式绑定</h4><p>显式绑定通过函数的实例方法apply和call实现,通过apply和call在函数调用时显式的指定this。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3], 无论是call还是apply,只是接收的时候不一样,传递到函数以后都一样</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// call和apply区别主要是接收this以外参数的形式,可以根据需求进行选择</span>\n<span class="token comment">// call除了接收this对象外,还能接收多个参数并传入函数</span>\n<span class="token function">log</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useCall&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// useCall</span>\n\n<span class="token comment">// apply除了接收this对象外,还能接收一个参数数组传入函数</span>\n<span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useApply&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// useApply</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="硬绑定" tabindex="-1"><a class="header-anchor" href="#硬绑定" aria-hidden="true">#</a> 硬绑定</h5><p>apply和call还是有局限的,只能在调用的时候指定,因此JS还提供了bind方法,返回一个新的、绑定好指定this的函数而不是立即调用,适用于当你需要绑定this而不马上调用的场景。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3]</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// useBind</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bind除了接收this对象外,还能接收多个参数并传入函数</span>\n<span class="token comment">// bind并不会立即执行函数,而是返回一个新的函数,接收参数的形式和call是一样的</span>\n<span class="token keyword">const</span> useBindFn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useBind&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 调用bind返回的函数</span>\n<span class="token function">useBindFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// useBind</span>\n\n<span class="token comment">// bind绑定this后返回的函数无法再使用apply、call和bind修改this</span>\n<span class="token function">useBindFn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useCall&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// useBind</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="apply、call、bind异同" tabindex="-1"><a class="header-anchor" href="#apply、call、bind异同" aria-hidden="true">#</a> apply、call、bind异同</h5><ul><li>当this为undefined或者null时会被忽略</li><li>apply和call是立即调用函数,而bind是返回一个绑定指定this的函数</li><li>除了this对象以外,apply接收参数数组并展开传入函数,而call和bind接收的是多个参数并传入</li></ul><h5 id="apply、call、bind应用" tabindex="-1"><a class="header-anchor" href="#apply、call、bind应用" aria-hidden="true">#</a> apply、call、bind应用</h5><p>apply、call和bind除了可以改变this指向以外,还可以改变参数的接收形式,apply接收数组,call接收多参数形式</p><h6 id="改变this指向" tabindex="-1"><a class="header-anchor" href="#改变this指向" aria-hidden="true">#</a> 改变this指向</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 通过改变this的指向,是函数能够在别的对象上使用</span>\n\n<span class="token comment">// 1. toString.call方式判断类型就是改变this指向的应用</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. 使String可以调用数组的部分方法(不改变原数组的方法, 因为string是基本数据类型,不能修改) </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> v <span class="token operator">&gt;</span> <span class="token string">&#39;h&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 就列举两个,主要是要看传入的this是否可以执行该函数,如果可以,才能修改this</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h6 id="改变参数形式" tabindex="-1"><a class="header-anchor" href="#改变参数形式" aria-hidden="true">#</a> 改变参数形式</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 例</span>\n<span class="token comment">// 原本的max是接收多参数形式的,现在通过apply可以接收数组,不过这个通过扩展运算符等方式也能实现</span>\n<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原本要这样接收参数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 扩展运算符也可以做到</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="手写apply、call和bind" tabindex="-1"><a class="header-anchor" href="#手写apply、call和bind" aria-hidden="true">#</a> 手写apply、call和bind</h5><p>函数是Function的实例对象,apply、call和bind是Function的实例属性,挂载在Function.prototype上,现在以相同的方式挂载实例方法模拟这三个方法。</p><h6 id="apply" tabindex="-1"><a class="header-anchor" href="#apply" aria-hidden="true">#</a> apply</h6><p>主要思路是通过将函数作为传入对象的方法,通过对象的方式进行调用,这样函数的this就会指向该对,也就改变了函数原本的this指向。</p><p><strong>注意</strong></p><ul><li>无法接收Symbol和bigint类型的值</li><li>undefined和null会被忽略,从而使用默认绑定</li><li>其他基本数据类型会被转换成包装对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// context为指定的this对象,params为参数数组,设置默认值</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 此处的this调用myApply的函数</span>\n\n  <span class="token comment">// 1. bigint和symbol无法转换成对象,所以不能作为this</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">&#39;bigint&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;this对象必须是对象或者可以转换成对象的基本数据类型,Symbo和BigInt不可以~&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 2. 当context为null或者undefined时,使用默认绑定规则,否则使用传递的context作为this</span>\n  <span class="token comment">// 使用Object包裹context,如果是基本数据类型,转换成包装对象,如果是引用数据类型,则没有影响</span>\n  context <span class="token operator">=</span> <span class="token punctuation">(</span>context <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> context <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>window <span class="token operator">||</span> global <span class="token operator">||</span> globalThis<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果传递的this为基本数据类型,则需要封装成对象</span>\n\n  <span class="token comment">// 3. 此处使用Symbol是因为如果context上存在同名的属性或方法,会被覆盖掉</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 4. 通过对象的方式调用函数,此处的this指向就是该对象了,通过将参数数组展开传递给函数</span>\n  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span>\\<span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 5. 删除刚刚添加到context上的函数,避免对context造成影响</span>\n  Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">logThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nlogThis<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useMyApply&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { type: &#39;useMyApply&#39;, [Symbol()]: [Function: logThis] }</span>\nlogThis<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Number: 0] { [Symbol()]: [Function: logThis] }</span>\nlogThis<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局对象</span>\nlogThis<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span><span class="token number">1024n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: this对象必须是对象或者可以转换成对象的基本数据类型,Symbo和BigInt不可以~</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h6 id="call" tabindex="-1"><a class="header-anchor" href="#call" aria-hidden="true">#</a> call</h6><p>call的思路和apply一致,只是接收参数的形式不同。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">&#39;bigint&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;this对象必须是对象或者可以转换成对象的基本数据类型,Symbo和BigInt不可以~&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  context <span class="token operator">=</span> <span class="token punctuation">(</span>context <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> context <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>window <span class="token operator">||</span> global <span class="token operator">||</span> globalThis<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果传递的this为基本数据类型,则需要封装成对象</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>\n  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span>\\<span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">logThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nlogThis<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useMyCall&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { type: &#39;useMyCall&#39;, [Symbol()]: [Function: logThis] }</span>\nlogThis<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Number: 0] { [Symbol()]: [Function: logThis] }</span>\nlogThis<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局对象</span>\nlogThis<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token number">1024n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: this对象必须是对象或者可以转换成对象的基本数据类型,Symbo和BigInt不可以~</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h6 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind</h6><p>主要思路是闭包,返回一个新的函数,该函数中通过对象的方式调用原函数,改变其this指向。</p><ul><li>无法接收Symbol和bigint类型的值</li><li>undefined和null会被忽略,从而使用默认绑定</li><li>其他基本数据类型会被转换成包装对象</li><li>bind可以被new调用,所以需要保持原型链一致以及判断是否使用new关键字调用</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span><span class="token operator">...</span>params1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 此处的this调用myBind的函数,</span>\n  <span class="token comment">// 1. bigint和symbol无法转换成对象,所以不能作为this</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">&#39;bigint&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;this对象必须是对象或者可以转换成对象的基本数据类型,Symbo和bigint不可以~&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 此处的this为调用myBind的函数,将其赋值给一个变量,避免和将要返回的函数中的this搞混了</span>\n  <span class="token keyword">const</span> outThis <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 2.context是接收的第一个参数 也就是this要指向的对象 </span>\n  <span class="token comment">// params1则是传递的参数</span>\n  <span class="token comment">// (window || global || globalThis) 是为了兼容浏览器和node版本</span>\n  context <span class="token operator">=</span> <span class="token punctuation">(</span>context <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> context <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>window <span class="token operator">||</span> global <span class="token operator">||</span> globalThis<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同apply和call</span>\n\n  <span class="token comment">// 3. 将函数绑定到context的原型上,等会就可以通过对象方式调用函数,这样this指向就改变了</span>\n  <span class="token comment">// 使用Symbol,避免重名等问题</span>\n  <span class="token keyword">let</span> fn<span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 之所以绑定要原型上,因为使用new关键字调用时,context会重新赋值,fn会丢失</span>\n  context<span class="token punctuation">.</span>__proto__<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> outThis<span class="token punctuation">;</span> \n  \n  <span class="token comment">// 4.bind返回的是一个新的函数,不影响原本函数</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 5. 由于bind返回到是函数,所以需要考虑返回到函数使用new关键字调用</span>\n    <span class="token comment">// 使用new关键字,函数中的this指向函数的实例对象</span>\n    <span class="token comment">// 不使用new关键字,context保持不变</span>\n    context <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> context<span class="token punctuation">;</span>\n\n    <span class="token comment">// 6. 调用函数并返回结果</span>\n    <span class="token keyword">return</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>params1<span class="token punctuation">,</span> <span class="token operator">...</span>params2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 7. bind可以被new调用,所以需要保持原型链一致</span>\n  func<span class="token punctuation">.</span>prototype <span class="token operator">=</span> outThis<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n\n  <span class="token comment">// 8. 返回新的函数</span>\n  <span class="token keyword">return</span> func<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> bindPerson <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token function">myBind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;useBind&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">bindPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;useBind&#39; }</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bindPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Person {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h4 id="new绑定" tabindex="-1"><a class="header-anchor" href="#new绑定" aria-hidden="true">#</a> new绑定</h4><p>JS中的所有函数都可以作为构造函数,只要通过new关键字调用(函数的构造调用),那么它就是构造函数,而通过new调用时,this指向为构造函数的实例对象。</p><h6 id="new中this" tabindex="-1"><a class="header-anchor" href="#new中this" aria-hidden="true">#</a> new中this</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>\n\n  <span class="token comment">// new中的this指向构造函数的实例对象</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Animal { name: &#39;QiQi&#39;, type: &#39;cat&#39; }</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> qq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&#39;QiQi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="new调用执行以下操作" tabindex="-1"><a class="header-anchor" href="#new调用执行以下操作" aria-hidden="true">#</a> new调用执行以下操作</h6><ul><li>创建一个新对象,新对象的原型为构造函数的prototype属性</li><li>将新对象作为构造函数执行的this并调用(用new调用时,构造函数中的this为新对象,也就是实例对象)</li><li>如果构造函数的返回值是对象(引用数据类型),则返回该对象,如果不是,那么返回新对象</li></ul><h6 id="手写new" tabindex="-1"><a class="header-anchor" href="#手写new" aria-hidden="true">#</a> 手写new</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 第一个参数为构造函数,后续参数为传递给构造函数的参数</span>\n<span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">Constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t<span class="token comment">// 1. 创建空对象</span>\n\t<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// 2.改变obj的原型 obj有可能会返回 而且是作为构造函数执行的this</span>\n\tobj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n\t\n\t<span class="token comment">// 1和2可以直接使用 Object.create代替</span>\n\t<span class="token comment">// let obj=Object.create(Constructor.prototype);</span>\n\n\t<span class="token comment">// 4. 执行构造函数并改变其this指向,通过接收其返回值</span>\n\t<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">Constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// 5. 如果构造函数返回值为引用数据类型,则直接返回, 如果不是,则返回obj</span>\n\t<span class="token keyword">return</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 如果使用了new关键字,则new.target为函数本身,否则undefined</span>\n\t<span class="token comment">// 这里就不模拟new.target了</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="绑定优先级" tabindex="-1"><a class="header-anchor" href="#绑定优先级" aria-hidden="true">#</a> 绑定优先级</h4><p>既然有这么多种绑定方式,那么就会存在优先级的概念(同时存在谁生效),绑定的优先级为 默认绑定 &lt; 隐式绑定 &lt; 显式绑定 &lt; new绑定</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 默认绑定优先级最低,只要绑定了其他任何规则,默认绑定就不会生效</span>\n<span class="token keyword">function</span> <span class="token function">logThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>\n\n<span class="token comment">// 默认绑定</span>\n<span class="token function">logThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局对象</span>\n\n<span class="token comment">// 隐式绑定 &gt; 默认绑定</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> logThis <span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">logThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { logThis: [Function: logThis] }, this为obj对象,所以隐式绑定 &gt; 默认绑定 </span>\n\n<span class="token comment">// 2. 显式绑定优先于隐式绑定</span>\nobj<span class="token punctuation">.</span><span class="token function">logThis</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useCall&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { type: &#39;useCall&#39; }, this为call绑定的对象,而不是obj, 显式绑定 &gt; 隐式绑定 </span>\n\n<span class="token comment">// 3. 由于call和apply都是直接调用,无法和new一起使用,所以演示的是bind</span>\n<span class="token keyword">const</span> bindLogThis <span class="token operator">=</span> <span class="token function">logThis</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useBind&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">new</span> <span class="token class-name">bindLogThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logThis {}, this为实例对象,而不是bind绑定的对象,new绑定 &gt; bind(显式绑定)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="箭头函数的this" tabindex="-1"><a class="header-anchor" href="#箭头函数的this" aria-hidden="true">#</a> 箭头函数的this</h4><p>ES6新增的箭头函数则无视这些绑定规则, <strong>箭头函数的this由定义函数的作用域中的this决定</strong>,要判断箭头函数的this指向,只要找到箭头函数的定义位置,然后判断该位置的this即可。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">outter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 此处是箭头函数定义的作用域</span>\n  <span class="token comment">// 箭头函数的this指向,由当前作用域的this决定,也就是说这里的this是什么,箭头函数的this也是什么</span>\n  <span class="token comment">// console.log(this); // 和箭头函数的this一致</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 箭头函数的this由定义时的this指向决定</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 跟随外层作用域的this指向</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 直接调用outter,outter的this为全局对象,所以箭头函数中也是全局对象</span>\n<span class="token function">outter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局对象</span>\n\n<span class="token comment">// outter使用call绑定了this,outter的this为{ type: &#39;useCall&#39; },所以箭头函数的this也是{ type: &#39;useCall&#39; }</span>\n<span class="token function">outter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useCall&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { type: &#39;useCall&#39; }</span>\n\n<span class="token comment">// outter是直接调用,所以this为全局对象,此时对返回的箭头函数使用call是无效的,箭头函数的this只由定义函数时的作用域this决定</span>\n<span class="token function">outter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;useCall&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局对象</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="递归和尾调用优化" tabindex="-1"><a class="header-anchor" href="#递归和尾调用优化" aria-hidden="true">#</a> 递归和尾调用优化</h2><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h3><h3 id="尾调用优化" tabindex="-1"><a class="header-anchor" href="#尾调用优化" aria-hidden="true">#</a> 尾调用优化</h3><h2 id="柯里化" tabindex="-1"><a class="header-anchor" href="#柯里化" aria-hidden="true">#</a> 柯里化</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',66),y={href:"https://github.com/xitu/gold-miner/blob/master/TODO/disassembling-javascripts-iife-syntax.md",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("揭秘 IIFE 语法"),w={href:"https://mariusschulz.com/blog/function-definitions-in-javascript",target:"_blank",rel:"noopener noreferrer"},j=(0,p.Uk)("Function Definitions in JavaScript"),x={href:"https://juejin.cn/post/6864378349512065038",target:"_blank",rel:"noopener noreferrer"},T=(0,p.Uk)("彻底搞懂闭包，柯里化，手写代码，金九银十不再丢分!"),F={},_=(0,a(3744).Z)(F,[["render",function(n,s){const a=(0,p.up)("Badge"),F=(0,p.up)("RouterLink"),_=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("h3",e,[o,c,(0,p.Wm)(a,{text:"ES6"})]),l,(0,p._)("h2",u,[i,r,(0,p.Wm)(a,{text:"ES6"})]),k,(0,p._)("ul",null,[m,(0,p._)("li",null,[b,(0,p.Wm)(F,{to:"/javascript/data-type/prototype/prototype.html"},{default:(0,p.w5)((()=>[d])),_:1})]),g,h]),f,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",y,[v,(0,p.Wm)(_)])]),(0,p._)("li",null,[(0,p._)("a",w,[j,(0,p.Wm)(_)])]),(0,p._)("li",null,[(0,p._)("a",x,[T,(0,p.Wm)(_)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);