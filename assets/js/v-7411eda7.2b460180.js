"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[3827],{2245:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-7411eda7",path:"/typescript/build-in-type.html",title:"内置类型",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"前置知识",slug:"前置知识",children:[]},{level:3,title:"Required<Type>",slug:"required-type",children:[]},{level:3,title:"Partial<Type>",slug:"partial-type",children:[]},{level:3,title:"Pick<Type, Keys>",slug:"pick-type-keys",children:[]},{level:3,title:"Omit<Type, Keys>",slug:"omit-type-keys",children:[]},{level:3,title:"Exclude<Type, ExcludeUnion>",slug:"exclude-type-excludeunion",children:[]},{level:3,title:"Extract<Type, Union>",slug:"extract-type-union",children:[]},{level:3,title:"Readonly<Type>",slug:"readonly-type",children:[]},{level:3,title:"Record<Keys, Type>",slug:"record-keys-type",children:[]},{level:3,title:"ReturnType<Type>",slug:"returntype-type",children:[]},{level:3,title:"NonNullable<Type>",slug:"nonnullable-type",children:[]},{level:3,title:"ConstructorParameters<Type>",slug:"constructorparameters-type",children:[]},{level:3,title:"ThisParameterType<Type>",slug:"thisparametertype-type",children:[]},{level:3,title:"InstanceType<Type>",slug:"instancetype-type",children:[]},{level:3,title:"Parameters<Type>",slug:"parameters-type",children:[]},{level:3,title:"OmitThisParameter<Type>",slug:"omitthisparameter-type",children:[]},{level:3,title:"String Manipulation Types",slug:"string-manipulation-types",children:[]}],filePathRelative:"typescript/build-in-type.md",git:{updatedTime:1650876314e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:4},{name:"chenxiaobin",email:"chenxiaobin@chenxiaobindeMacBook-Pro.local",commits:1}]}}},6609:(s,n,a)=>{a.r(n),a.d(n,{default:()=>u});var e=a(6252);const p=(0,e._)("h1",{id:"内置类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#内置类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 内置类型")],-1),t=(0,e._)("p",null,"TypeScript提供了几种实用的类型供用户直接使用,接下去会对这些类型的使用和定义进行解析。",-1),o=(0,e._)("h3",{id:"前置知识",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#前置知识","aria-hidden":"true"},"#"),(0,e.Uk)(" 前置知识")],-1),l=(0,e._)("p",null,"此处为接下去的内置类型所需要的前置知识。",-1),c=(0,e._)("li",null,[(0,e._)("a",{href:"TODO"},"infer")],-1),r=(0,e.Uk)("映射类型"),i=(0,e.uE)('<h6 id="extends处理高级类型" tabindex="-1"><a class="header-anchor" href="#extends处理高级类型" aria-hidden="true">#</a> extends处理高级类型</h6><p>extends对高级类型的处理,如果extends前是泛型,则是分别对高级类型中的每个类型进行判断,如果不是泛型,则为一个整体作为判断。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 以联合类型举例</span>\n<span class="token keyword">type</span> <span class="token class-name">Mixins</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 泛型情况</span>\n<span class="token comment">// Str接收一个泛型T, 如果泛型T是string的子类型,则返回T,否则返回never(为什么是never,看第四点)</span>\n<span class="token comment">// 此处T是联合类型,会将联合类型的每一项作为T代入,此处为0和&#39;A&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">Str<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span> <span class="token comment">// 当前是保留string子类型,调换T和never的位置,则变成剔除string子类型</span>\n<span class="token keyword">type</span> <span class="token class-name">StrInMixins</span> <span class="token operator">=</span> Str<span class="token operator">&lt;</span>Mixins<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 此处的T为Mixins相当于</span>\n<span class="token keyword">type</span> <span class="token class-name">StrInMixins2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 而不使用泛型, 直接使用该联合类型, 此处是直接比较 Mixins extends string的结果,而不会将联合类型中的类型分别extends</span>\n<span class="token keyword">type</span> <span class="token class-name">StrInMixins3</span> <span class="token operator">=</span> Mixins <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> Mixins <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h6 id="in在类型定义的使用" tabindex="-1"><a class="header-anchor" href="#in在类型定义的使用" aria-hidden="true">#</a> in在类型定义的使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 联合类型时</span>\n<span class="token keyword">type</span> <span class="token class-name">Obj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Keys<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 相当于, 说白了就是遍历Keys,定义属性</span>\n<span class="token comment">// type Obj = {</span>\n<span class="token comment">//   name: any;</span>\n<span class="token comment">//   title: any;</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 基础类型时, in 相当于 :</span>\n<span class="token keyword">type</span> <span class="token class-name">Book</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token keyword">type</span> <span class="token class-name">Book</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h6 id="never在高级类型中的使用" tabindex="-1"><a class="header-anchor" href="#never在高级类型中的使用" aria-hidden="true">#</a> never在高级类型中的使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. never在联合类型中,直接被忽略</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">NS</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">never</span><span class="token punctuation">;</span> \n<span class="token comment">// 相当于 type NS = string | number</span>\n\n<span class="token comment">// 2. never在交叉类型中,直接整个交叉类型变成never</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">=</span> <span class="token builtin">any</span> <span class="token operator">&amp;</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token comment">// 相当于 type NS = never</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h6 id="new修饰的函数" tabindex="-1"><a class="header-anchor" href="#new修饰的函数" aria-hidden="true">#</a> new修饰的函数</h6><p>在JS中,除箭头函数以外的函数都可以使用new关键字调用而成为构造函数,但是在TS中,普通函数和构造函数是有区分的。普通函数无法直接赋值给构造函数类型,而构造函数类型的调用必须使用new关键字,并且无法相互赋值,即构造函数类型无法赋值给普通函数类型,普通函数类型也无法赋值给构造函数类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 通过new关键字,将函数类型变成构造函数类型,即不再是用于限定普通函数,而是用于限定构造函数</span>\n<span class="token keyword">type</span> <span class="token class-name">ConType</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 普通函数无法直接赋值给构造函数类型, 只能通过双重断言</span>\n<span class="token keyword">let</span> con<span class="token operator">:</span> <span class="token function-variable function">ConType</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> ConType<span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">con</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造函数类型只能通过new调用</span>\n\n<span class="token comment">// con(); // 类型“ConType”的值不可调用。是否希望包括 &quot;new&quot;? --- 只能通过new调用</span>\n\n<span class="token comment">// 普通函数类型和构造函数类型无法直接赋值, 需要进行类型断言</span>\n<span class="token keyword">type</span> <span class="token class-name">FnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> fn<span class="token operator">:</span> FnType <span class="token operator">=</span> con <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> FnType<span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h6 id="abstract修饰的构造函数类型" tabindex="-1"><a class="header-anchor" href="#abstract修饰的构造函数类型" aria-hidden="true">#</a> abstract修饰的构造函数类型</h6><p>使用abstract修饰的构造函数类型无法进行实例化。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AbsFnType</span> <span class="token operator">=</span> <span class="token keyword">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> con<span class="token operator">:</span> AbsFnType <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">con</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法创建抽象类的实例</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="this参数" tabindex="-1"><a class="header-anchor" href="#this参数" aria-hidden="true">#</a> this参数</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// this参数必须写在第一个参数的位置,否则会报错</span>\n<span class="token keyword">type</span> <span class="token class-name">FnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 不过需要注意的一点是,参数名为this的参数无法直接传递,可以通过apply等修改this的方式传入</span>\n<span class="token keyword">let</span> fn<span class="token operator">:</span> <span class="token function-variable function">FnType</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// fn(); // 类型为“void”的 &quot;this&quot; 上下文不能分配给类型为“number”的方法的 &quot;this&quot;</span>\n<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\n\n\n<span class="token comment">// this参数还有个问题,就是在infer推断类型的时候会被忽略掉, 具体查看infer章</span>\n<span class="token comment">// 通过infer P来获取参数列表的类型</span>\n<span class="token keyword">type</span> <span class="token class-name">MyParameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 可以看出, this参数被省略了</span>\n<span class="token keyword">type</span> <span class="token class-name">ParamType</span> <span class="token operator">=</span> MyParameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>s<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type ParamType = [s: string]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="required-type" tabindex="-1"><a class="header-anchor" href="#required-type" aria-hidden="true">#</a> Required&lt;Type&gt;</h3><p>返回一个包含Type所有属性、所有属性都是必填的类型, 与Partial相反。</p><h6 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">OpBook</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  auth<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  date<span class="token operator">?</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">RBook</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>OpBook<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 此时的RBook所有的属性都变成必填的了</span>\n<span class="token comment">// type RBook = {</span>\n<span class="token comment">//   title: string;</span>\n<span class="token comment">//   auth: string;</span>\n<span class="token comment">//   date: Date;</span>\n<span class="token comment">// }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h6 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 前置知识部分提到过,可以使用-?将属性变成必填的, 其余部分和Readonly非常类似(遍历keys并设置类型)</span>\n<span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="partial-type" tabindex="-1"><a class="header-anchor" href="#partial-type" aria-hidden="true">#</a> Partial&lt;Type&gt;</h3><p>返回一个和Type属性相同,但所有属性都是可选属性的新类型。</p><h6 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n  title<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">PPerson</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Partial会给每个属性增加?, 相当于</span>\n<span class="token comment">// type PPerson = {</span>\n<span class="token comment">//   name?: string;</span>\n<span class="token comment">//   title?: string;</span>\n<span class="token comment">// }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h6 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// &lt;T&gt;接收一个类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// K为T的key值,T[K]为值</span>\n  <span class="token comment">// 如果没有?, 那么和原本的T是一样的,加上?,则变成可选的属性</span>\n\t<span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="pick-type-keys" tabindex="-1"><a class="header-anchor" href="#pick-type-keys" aria-hidden="true">#</a> Pick&lt;Type, Keys&gt;</h3><p>返回一个从Type选择Keys(键组)的新类型,键组可以是字符串或者字符串的联合类型,但是必须是Type的全部keys的子集,即 不能出现Type中不存在的键。</p><h6 id="使用-2" tabindex="-1"><a class="header-anchor" href="#使用-2" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n  title<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n  run<span class="token operator">:</span><span class="token builtin">Function</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 此处,第二个泛型只能接收 name | title | run 的子集</span>\n<span class="token keyword">type</span> <span class="token class-name">PPerson</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;title&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Pick会根据keys创建新的类型,该类型仅包含原Type的keys</span>\n<span class="token comment">// type PPerson = {</span>\n<span class="token comment">//   name: string;</span>\n<span class="token comment">//   title: string;</span>\n<span class="token comment">// }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h6 id="定义-2" tabindex="-1"><a class="header-anchor" href="#定义-2" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// T为被Pick的类型,K为T的keys的子集(keyof T,获取T的所有键作为类型)</span>\n<span class="token comment">// 通过in遍历K设置属性及其类型即可完成Pick操作</span>\n<span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="omit-type-keys" tabindex="-1"><a class="header-anchor" href="#omit-type-keys" aria-hidden="true">#</a> Omit&lt;Type, Keys&gt;</h3><p>返回一个从Type的所有属性中删除Keys(字符串或者字符串联合类型,如果Type中不存在,则不影响)的新类型。</p><h6 id="使用-3" tabindex="-1"><a class="header-anchor" href="#使用-3" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  auth<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  date<span class="token operator">:</span> Date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// date属性限定被删除,time不存在,所以不影响</span>\n<span class="token keyword">type</span> <span class="token class-name">OBook</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Book<span class="token punctuation">,</span> <span class="token string">&#39;date&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;time&#39;</span><span class="token operator">&gt;</span>\n\n<span class="token comment">// 此时的OBook就是删除了date属性的Book</span>\n<span class="token comment">// type OBook = {</span>\n<span class="token comment">//   title: string;</span>\n<span class="token comment">//   auth: string;</span>\n<span class="token comment">// }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h6 id="定义-3" tabindex="-1"><a class="header-anchor" href="#定义-3" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Omit通过key位置使用Exclude剔除属性</span>\n<span class="token comment">// K extends string | number | symbol 一般用于限定键(key)的类型</span>\n<span class="token comment">// [P in Exclude&lt;keyof T, K&gt;]  从T的keys中剔除K(这里的K是要剔除的keys,字符串或字符串联合类型)并使用in遍历作为新类型的key</span>\n<span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="exclude-type-excludeunion" tabindex="-1"><a class="header-anchor" href="#exclude-type-excludeunion" aria-hidden="true">#</a> Exclude&lt;Type, ExcludeUnion&gt;</h3><p>返回一个从联合类型Type中排除ExcludeUnion类型的新类型。</p><h6 id="使用-4" tabindex="-1"><a class="header-anchor" href="#使用-4" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 从联合类型UType中剔除boolean类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">NS</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>UType<span class="token punctuation">,</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token comment">// type NS = string | number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h6 id="定义-4" tabindex="-1"><a class="header-anchor" href="#定义-4" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 这行代码的意思是 如果联合类型T中的子类型是U的子类型,则返回never(被忽略 - 可参考前置知识),否则返回该类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 以UType为例</span>\n<span class="token keyword">type</span> <span class="token class-name">UType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>UType<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 此处 type S = string</span>\n<span class="token comment">// 相当于</span>\n<span class="token comment">// type S = (string extends boolean ? never : string) | (boolean extends boolean ? never : boolean);</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="extract-type-union" tabindex="-1"><a class="header-anchor" href="#extract-type-union" aria-hidden="true">#</a> Extract&lt;Type, Union&gt;</h3><p>返回联合类型Type中,是Union类型的子类型的类型的联合类型。</p><h6 id="使用-5" tabindex="-1"><a class="header-anchor" href="#使用-5" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">BC</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span><span class="token operator">|</span><span class="token string">&#39;b&#39;</span><span class="token operator">|</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">|</span><span class="token string">&#39;c&#39;</span><span class="token operator">|</span><span class="token string">&#39;d&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// type BC = &quot;b&quot; | &quot;c&quot;</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">NS</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token comment">// type NS = string | number</span>\n\n<span class="token comment">// 如果不存在,则是never</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>  <span class="token comment">// type N = never</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h6 id="定义-5" tabindex="-1"><a class="header-anchor" href="#定义-5" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 这行代码的意思是 如果联合类型T中的子类型是U的子类型,则返回该类型,否则返回never(和Exclude相反)</span>\n<span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n\n<span class="token comment">// 以UType为例</span>\n<span class="token keyword">type</span> <span class="token class-name">UType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span>UType<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 此处 type B = boolean</span>\n<span class="token comment">// 相当于</span>\n<span class="token comment">// type B = (string extends boolean ? string : never) | (boolean extends boolean ? boolean : never );</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="readonly-type" tabindex="-1"><a class="header-anchor" href="#readonly-type" aria-hidden="true">#</a> Readonly&lt;Type&gt;</h3><p>返回由Type的所有属性构成、并且所有属性都是只读的新类型。</p><h6 id="使用-6" tabindex="-1"><a class="header-anchor" href="#使用-6" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  auth<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  date<span class="token operator">:</span> Date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用Readonly将所有属性变成只读</span>\n<span class="token keyword">type</span> <span class="token class-name">RBook</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Book<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 此时的RBook就是将Book的所有属性都变成readonly</span>\n<span class="token comment">// type RBook = {</span>\n<span class="token comment">//   readonly title: string;</span>\n<span class="token comment">//   readonly auth: string;</span>\n<span class="token comment">//   readonly date: Date;</span>\n<span class="token comment">// }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h6 id="定义-6" tabindex="-1"><a class="header-anchor" href="#定义-6" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Readonly的实现比较简单,就是通过readonly修饰in遍历的所有属性</span>\n<span class="token comment">// [P in keyof T] 遍历T的所有key并作为属性名</span>\n<span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="record-keys-type" tabindex="-1"><a class="header-anchor" href="#record-keys-type" aria-hidden="true">#</a> Record&lt;Keys, Type&gt;</h3><p>返回一个属性为keys类型,值为Type类型的对象类型。</p><h6 id="使用-7" tabindex="-1"><a class="header-anchor" href="#使用-7" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token string">&#39;type&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 限定了一个键为Keys类型,value为string类型的对象类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Book</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>Keys<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> p<span class="token operator">:</span> Book <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;YDNJS&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;JS&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="定义-7" tabindex="-1"><a class="header-anchor" href="#定义-7" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 对象属性名的类型必定是 string | number | symbol的子类型, 此处K就是限定属性的泛型</span>\n<span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="returntype-type" tabindex="-1"><a class="header-anchor" href="#returntype-type" aria-hidden="true">#</a> ReturnType&lt;Type&gt;</h3><p>返回一个函数类型的返回值类型。</p><h6 id="使用-8" tabindex="-1"><a class="header-anchor" href="#使用-8" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">FnReturn</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>Fn<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type FnReturn = string | number</span>\n\n<span class="token keyword">type</span> <span class="token class-name">anyType</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type anyType = any;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">neverType</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type neverType = never;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h6 id="定义-8" tabindex="-1"><a class="header-anchor" href="#定义-8" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// T extends (...args: any) =&gt; any, 即泛型接收的是函数类型</span>\n<span class="token comment">// infer仅在extends可用,作用是让TS根据extends前的类型进行推断,并将推断的类型存储在一个类型变量中</span>\n<span class="token comment">// 拿 type fn = () =&gt; number | string 举例, fn extends (...args: any) =&gt; infer R, 此时的infer R 被推断成了 number | string</span>\n<span class="token comment">// 此时的R就存储了类型 number | string</span>\n<span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="nonnullable-type" tabindex="-1"><a class="header-anchor" href="#nonnullable-type" aria-hidden="true">#</a> NonNullable&lt;Type&gt;</h3><p>返回Type剔除掉null和undefined后的新类型。</p><h6 id="使用-9" tabindex="-1"><a class="header-anchor" href="#使用-9" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Mixins</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">NMixins</span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span>Mixins<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type NMixins = string | number | boolean</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h6 id="定义-9" tabindex="-1"><a class="header-anchor" href="#定义-9" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 当泛型T是null的子类型时,返回never, 否则返回T,这样就能将null和undefined排除</span>\n<span class="token keyword">type</span> <span class="token class-name">NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 为什么是null而不是 null | undefined ?</span>\n<span class="token comment">// 因为undefined 和 null 互为子类型, 因此也可以写成</span>\n<span class="token keyword">type</span> <span class="token class-name">NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">undefined</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="constructorparameters-type" tabindex="-1"><a class="header-anchor" href="#constructorparameters-type" aria-hidden="true">#</a> ConstructorParameters&lt;Type&gt;</h3><p>返回构造函数类型的参数列表的类型,它是一个包含所有参数类型的元组,当Type不为函数类型时,返回never类型。</p><h6 id="使用-10" tabindex="-1"><a class="header-anchor" href="#使用-10" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Con</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 获取构造函数类型Con的参数列表的类型</span>\n<span class="token keyword">type</span> <span class="token class-name">CPType</span>  <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>Con<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type CPType = [n: number, s: string]</span>\n\n<span class="token keyword">type</span> <span class="token class-name">CRType2</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token keyword">new</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type CRType2 = [b: boolean]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h6 id="定义-10" tabindex="-1"><a class="header-anchor" href="#定义-10" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// T extends abstract new (...args: any) =&gt; any, 限定T为抽象构造函数类型</span>\n<span class="token comment">// (...args: infer P)使用infer P推断args的类型并返回,就获取到构造函数参数的类型了</span>\n<span class="token keyword">type</span> <span class="token class-name">ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">abstract</span></span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="thisparametertype-type" tabindex="-1"><a class="header-anchor" href="#thisparametertype-type" aria-hidden="true">#</a> ThisParameterType&lt;Type&gt;</h3><p>返回函数类型参数列表中的this的类型,如果没有则是unknown。</p><h6 id="使用-11" tabindex="-1"><a class="header-anchor" href="#使用-11" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">ThisType</span> <span class="token operator">=</span> ThisParameterType<span class="token operator">&lt;</span>FnType<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type ThisType = number</span>\n\n<span class="token comment">// 参数名为this的参数无法直接传递,可通过apply等修改this的方式传入</span>\n\n<span class="token keyword">let</span> fn<span class="token operator">:</span> <span class="token function-variable function">FnType</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// fn(); // 类型为“void”的 &quot;this&quot; 上下文不能分配给类型为“number”的方法的 &quot;this&quot;</span>\n<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h6 id="定义-11" tabindex="-1"><a class="header-anchor" href="#定义-11" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// (this: infer U, ...args: any[]) =&gt; any 是包含this参数的函数类型</span>\n<span class="token comment">// 使用infer推断this的类型并返回</span>\n<span class="token keyword">type</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">unknown</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="instancetype-type" tabindex="-1"><a class="header-anchor" href="#instancetype-type" aria-hidden="true">#</a> InstanceType&lt;Type&gt;</h3><p>返回构造函数类型对应的实例的类型。</p><h6 id="使用-12" tabindex="-1"><a class="header-anchor" href="#使用-12" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// InstanceType接收类型, 所以使用 typeof先获取Person的类型</span>\n<span class="token keyword">type</span> <span class="token class-name">PersonInstanceType</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Person<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Person</span>\n<span class="token keyword">type</span> <span class="token class-name">NeverInstanceType</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// never</span>\n<span class="token keyword">type</span> <span class="token class-name">AnyInstanceType</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// any</span>\n\n<span class="token comment">// InstanceType接收的Type为abstract new (...args: any) =&gt; any 的子类型</span>\n<span class="token keyword">type</span> <span class="token class-name">StringType</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 类型“string”不满足约束“abstract new (...args: any) =&gt; any”</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="定义-12" tabindex="-1"><a class="header-anchor" href="#定义-12" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 和ConstructorParameters相似, 通过infer R获取返回值类型</span>\n<span class="token keyword">type</span> <span class="token class-name">InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">abstract</span></span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="parameters-type" tabindex="-1"><a class="header-anchor" href="#parameters-type" aria-hidden="true">#</a> Parameters&lt;Type&gt;</h3><p>返回函数类型的参数的类型(元组),注意,this参数会被忽略,原因请参考前置知识。</p><h6 id="使用-13" tabindex="-1"><a class="header-anchor" href="#使用-13" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FnType</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 可以看出,this参数被忽略了,其余参数以元组类型的形式返回</span>\n<span class="token keyword">type</span> <span class="token class-name">FnParameterType</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>FnType<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type FnParameterType = [n: number]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h6 id="定义-13" tabindex="-1"><a class="header-anchor" href="#定义-13" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// T extends (...args: any) =&gt; any, 即T是函数类型</span>\n<span class="token comment">// 使用infer P接收参数列表的类型(这一步会忽略this)并返回</span>\n<span class="token keyword">type</span> <span class="token class-name">Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="omitthisparameter-type" tabindex="-1"><a class="header-anchor" href="#omitthisparameter-type" aria-hidden="true">#</a> OmitThisParameter&lt;Type&gt;</h3><p>返回函数类型Type的移除this参数后的类型,当this的类型为unknown的父类型时不会移除,Type为非函数类型时,直接返回Type。</p><h6 id="使用-14" tabindex="-1"><a class="header-anchor" href="#使用-14" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 如果没有this参数则直接返回Type</span>\n<span class="token keyword">type</span> <span class="token class-name">NoThisFnType1</span> <span class="token operator">=</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token punctuation">(</span>title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type NoThisFnType1 = (title: string) =&gt; void</span>\n\n<span class="token comment">// 只有this参数,返回剔除this参数后的Type</span>\n<span class="token keyword">type</span> <span class="token class-name">NoThisFnType2</span> <span class="token operator">=</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type NoThisFnType2 = () =&gt; void</span>\n\n<span class="token comment">// 多个参数并且包含this参数,返回剔除this参数后的Type</span>\n<span class="token keyword">type</span> <span class="token class-name">NoThisFnType3</span> <span class="token operator">=</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type NoThisFnType3 = (title: string) =&gt; void</span>\n\n<span class="token comment">// 当this的类型是any和unknown时并不会被省略,原因请看定义</span>\n<span class="token keyword">type</span> <span class="token class-name">AnyFnType</span> <span class="token operator">=</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type AnyFnType = (this: any) =&gt; void</span>\n<span class="token keyword">type</span> <span class="token class-name">UnknownFnType</span> <span class="token operator">=</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type UnknownFnType = (this: unknown) =&gt; void</span>\n\n<span class="token comment">// 非函数类型,则会直接返回Type</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">=</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type N = never</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type S = string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h6 id="定义-14" tabindex="-1"><a class="header-anchor" href="#定义-14" aria-hidden="true">#</a> 定义</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 当Type的this类型为unknown的父类型,直接返回Type,否则判断是否是函数类型,如果是函数类型,则返回移除this后的函数类型,如果不是函数类型则直接返回</span>\n<span class="token comment">// 1. unknown extends ThisParameterType&lt;T&gt; 判断unknown是否是T的this参数类型的子类型,这也是为什么any和unknown的this不会被移除的原因</span>\n<span class="token comment">// 2. T extends (...args: infer A) =&gt; infer R, 这里的infer A的A会忽略掉this参数</span>\n<span class="token comment">// 3. (...args: A) =&gt; R, 则是返回的移除this参数后的新的函数类型</span>\n<span class="token keyword">type</span> <span class="token class-name">OmitThisParameter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">unknown</span> <span class="token keyword">extends</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="string-manipulation-types" tabindex="-1"><a class="header-anchor" href="#string-manipulation-types" aria-hidden="true">#</a> String Manipulation Types</h3><p>字符串操作类型有Uppercase&lt;Type&gt;、Lowercase&lt;Type&gt;、Capitalize&lt;Type&gt;以及Uncapitalize&lt;Type&gt;,其中Type为字符串的子类型(Type extends string)。</p><h6 id="使用-15" tabindex="-1"><a class="header-anchor" href="#使用-15" aria-hidden="true">#</a> 使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 将字符串类型转换成大写</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">=</span> Uppercase<span class="token operator">&lt;</span><span class="token string">&#39;hello&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;hi&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type U = &quot;HELLO&quot; | &quot;HI&quot;</span>\n\n<span class="token comment">// 将字符串类型转换成小写</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">L</span></span> <span class="token operator">=</span> Lowercase<span class="token operator">&lt;</span><span class="token string">&#39;Hello&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Hi&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type L = &quot;hello&quot; | &quot;hi&quot;</span>\n\n<span class="token comment">// 将字符串类型首字母大写</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> Capitalize<span class="token operator">&lt;</span><span class="token string">&#39;hello&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;hi&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type C = &quot;Hello&quot; | &quot;Hi&quot;</span>\n\n<span class="token comment">// 将字符串类型首字母小写</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">UC</span></span> <span class="token operator">=</span> Uncapitalize<span class="token operator">&lt;</span><span class="token string">&#39;Hello&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Hi&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type UC = &quot;hello&quot; | &quot;hi&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',109),k={},u=(0,a(3744).Z)(k,[["render",function(s,n){const a=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,t,o,l,(0,e._)("ul",null,[c,(0,e._)("li",null,[(0,e.Wm)(a,{to:"/typescript/advanced-type.html#%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B"},{default:(0,e.w5)((()=>[r])),_:1})])]),i],64)}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);