"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[862],{5325:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-042dae85",path:"/javascript/reflect.html",title:"Reflect",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Reflect.get",slug:"reflect-get",children:[]},{level:2,title:"Reflect.set",slug:"reflect-set",children:[]},{level:2,title:"Reflect.defineProperty",slug:"reflect-defineproperty",children:[]},{level:2,title:"Reflect.deleteProperty",slug:"reflect-deleteproperty",children:[]},{level:2,title:"Reflect.getOwnPropertyDescriptor",slug:"reflect-getownpropertydescriptor",children:[]},{level:2,title:"Reflect.setPrototypeOf",slug:"reflect-setprototypeof",children:[]},{level:2,title:"Reflect.getPrototypeOf",slug:"reflect-getprototypeof",children:[]},{level:2,title:"Reflect.has",slug:"reflect-has",children:[]},{level:2,title:"Reflect.preventExtensions",slug:"reflect-preventextensions",children:[]},{level:2,title:"Reflect.isExtensible",slug:"reflect-isextensible",children:[]},{level:2,title:"Reflect.ownKeys",slug:"reflect-ownkeys",children:[]},{level:2,title:"Reflect.apply",slug:"reflect-apply",children:[]},{level:2,title:"Reflect.construct",slug:"reflect-construct",children:[]}],filePathRelative:"javascript/reflect.md",git:{updatedTime:1640158634e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:1}]}}},1990:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="reflect" tabindex="-1"><a class="header-anchor" href="#reflect" aria-hidden="true">#</a> Reflect</h1><p>Reflect是内置对象,提供了Javascript操作的方法,它不是函数对象,所以无法通过new来创建实例对象。</p><p>Reflect(不兼容IE)可以和proxy(也不兼容IE)完美配合,不过在项目中使用频率非常低,现阶段稍做了解,暂时不需要花过多时间深入学习。</p><h2 id="reflect-get" tabindex="-1"><a class="header-anchor" href="#reflect-get" aria-hidden="true">#</a> Reflect.get</h2><p>Reflect.get()方法以函数调用的形式从对象中读取属性。</p><h6 id="参数列表-reflect-get-target-propertykey-receiver" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-get-target-propertykey-receiver" aria-hidden="true">#</a> 参数列表: Reflect.get(target, propertyKey[, receiver])</h6><ul><li>target <ul><li>详情:取值对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li><li>propertyKey <ul><li>详情: 属性名,用于获取对应的值</li><li>必填: true</li></ul></li><li>receiver: <ul><li>详情: 在属性是以getter的形式设置时,receiver作为getter函数的this</li><li>必填: false</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;receiver&#39; }, getter的this默认是obj,但是Reflect.get的时候可以指定this</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;Marco&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 获取obj上key为name的值,若该属性是getter形式,其中的this为{ name: &#39;receiver&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;receiver&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Marco</span>\n\n<span class="token comment">// target必须是对象,否则类型错误</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Reflect.get called on non-object - 类型一次:在非对象上调用Reflect.get</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="reflect-set" tabindex="-1"><a class="header-anchor" href="#reflect-set" aria-hidden="true">#</a> Reflect.set</h2><p>Reflect.set()方法以函数调用的形式设置对象属性。</p><h6 id="参数列表-reflect-set-target-propertykey-value-receiver" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-set-target-propertykey-value-receiver" aria-hidden="true">#</a> 参数列表: Reflect.set(target, propertyKey, value[, receiver])</h6><ul><li>target <ul><li>详情:取值对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li><li>propertyKey <ul><li>详情: 属性名,设置的属性的名称</li><li>必填: true</li></ul></li><li>value <ul><li>详情: 属性名对应的值</li><li>必填: true</li></ul></li><li>receiver: <ul><li>详情: 在属性是以setter的形式设置时,receiver作为setter函数的this</li><li>必填: false</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true,但是没有指定key和value,所以key和value都是undefined</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { undefined: undefined }</span>\n\n<span class="token keyword">const</span> coder <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nReflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>coder<span class="token punctuation">,</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coder<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { code: 1024 }, 设置成功</span>\n\n<span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>\n  _source<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_source<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">set</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 默认情况下,this指向student,但是Reflect.set可以指定receiver改变this指向</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_source <span class="token operator">=</span> source<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> receiver <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;receiver&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nReflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token string">&#39;source&#39;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n\nReflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token string">&#39;source&#39;</span><span class="token punctuation">,</span> <span class="token number">99</span> <span class="token punctuation">,</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 可以发现,student.source没有改变,因为指定了receiver,所以this改变了,实际上修改的是receiver</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 100</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>receiver<span class="token punctuation">.</span>_source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 99</span>\n\n<span class="token comment">// 无法设置/无法修改的属性值,使用Reflct.set设置会失败,返回false</span>\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span><span class="token string">&#39;Peate&#39;</span><span class="token punctuation">,</span>\n  configurable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n  writable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n  enumerable<span class="token operator">:</span><span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;Jiessie&#39;</span><span class="token punctuation">,</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false,设置失败</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Peate</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="reflect-defineproperty" tabindex="-1"><a class="header-anchor" href="#reflect-defineproperty" aria-hidden="true">#</a> Reflect.defineProperty</h2><p>Reflect.defineProperty()用于设置属性描述,基本与Object.defineProperty等价,返回boolean。</p><h6 id="参数列表-reflect-defineproperty-target-propertykey-attributes" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-defineproperty-target-propertykey-attributes" aria-hidden="true">#</a> 参数列表: Reflect.defineProperty(target, propertyKey, attributes)</h6><ul><li>target <ul><li>详情:取值对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li><li>propertyKey <ul><li>详情: 属性名,用于获取对应的值</li><li>必填: true</li></ul></li><li>attributes: <ul><li>详情: 属性描述,用于设置该属性</li><li>设置项: <ul><li>value: 属性值,默认undefined</li><li>configurable: 是否可设置,默认false,即该属性无法重新设置,也无法删除</li><li>enumerable: 是否可枚举,默认false,即该属性无法被枚举,如打印对象、for..of..和Object.keys()时不会显示</li><li>writable: 是否可修改,默认false,即该属性的值无法被修改</li><li>get: getter函数,默认undefined</li><li>set: setter函数,默认undefined</li></ul></li><li>必填: true</li></ul></li></ul><h6 id="描述符分类" tabindex="-1"><a class="header-anchor" href="#描述符分类" aria-hidden="true">#</a> 描述符分类</h6><p>注意: （get、set）和（value、writable）不能够同时出现在一个描述符中</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">enumerable</th><th style="text-align:center;">configurable</th><th style="text-align:center;">value</th><th style="text-align:center;">writable</th><th style="text-align:center;">get</th><th style="text-align:center;">set</th></tr></thead><tbody><tr><td style="text-align:center;">数据描述符</td><td style="text-align:center;">可以</td><td style="text-align:center;">可以</td><td style="text-align:center;">可以</td><td style="text-align:center;">可以</td><td style="text-align:center;">不可以</td><td style="text-align:center;">不可以</td></tr><tr><td style="text-align:center;">存取描述符</td><td style="text-align:center;">可以</td><td style="text-align:center;">可以</td><td style="text-align:center;">不可以</td><td style="text-align:center;">不可以</td><td style="text-align:center;">可以</td><td style="text-align:center;">可以</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nReflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span>\n  writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 类型异常: 无效属性描述符,无法同时指定存取器(getter/setter)和 value或writable.</span>\n<span class="token comment">// TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="演示" tabindex="-1"><a class="header-anchor" href="#演示" aria-hidden="true">#</a> 演示</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nReflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span><span class="token string">&#39;You don\\&#39;t know JS&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 属性值</span>\n  configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment">// 是否可设置</span>\n  enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment">// 是否可枚举</span>\n  writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token comment">// 是否可修改</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">delete</span> book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// configurable为false,无法删除</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n  value<span class="token operator">:</span><span class="token string">&#39;Javascript高级教程&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, 因为configurable为false,所以无法重新设置</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}, enumerable为false,无法枚举</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法枚举,所以什么也不打印</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [], 无法枚举,Object.keys只能获取可枚举的属性名</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// You don&#39;t know JS, 虽然无法枚举,但是还是可以获取</span>\n\nbook<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;Javascript语言精粹&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// You don&#39;t know JS, writable为false,所以无法修改值</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="reflect-deleteproperty" tabindex="-1"><a class="header-anchor" href="#reflect-deleteproperty" aria-hidden="true">#</a> Reflect.deleteProperty</h2><p>Reflect.deleteProperty()用于删除属性,与非严格模式的delete基本一致</p><h6 id="参数列表-reflect-deleteproperty-target-propertykey" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-deleteproperty-target-propertykey" aria-hidden="true">#</a> 参数列表 Reflect.deleteProperty(target, propertyKey)</h6><ul><li>target <ul><li>详情:目标对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li><li>propertyKey <ul><li>详情: 属性名,删除属性名对应的值</li><li>必填: false,默认undefined</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;QiQi&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;American Shorthair&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>\n  <span class="token keyword">undefined</span><span class="token operator">:</span> <span class="token string">&#39;U&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 删除属性成功,返回true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 属性不存在也算成功,返回true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span>\n\nReflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n  configurable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 不传propertyKey时,propertyKey默认为undefined,所以删除键名为undefined的属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 不可配置的属性无法使用delete和Reflect.deleteProperty删除,返回false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="reflect-getownpropertydescriptor" tabindex="-1"><a class="header-anchor" href="#reflect-getownpropertydescriptor" aria-hidden="true">#</a> Reflect.getOwnPropertyDescriptor</h2><p>Reflect.getOwnPropertyDescriptor()方法以函数调用的形式从对象中读取属性描述符。</p><h6 id="参数列表-reflect-getownpropertydescriptor-target-propertykey" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-getownpropertydescriptor-target-propertykey" aria-hidden="true">#</a> 参数列表: Reflect.getOwnPropertyDescriptor(target, propertyKey)</h6><ul><li>target <ul><li>详情:目标对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li><li>propertyKey <ul><li>详情: 属性名,用于获取对应的属性描述符</li><li>必填: false,默认undefined</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  code<span class="token operator">:</span><span class="token number">1024</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nReflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span><span class="token string">&#39;Polo&#39;</span><span class="token punctuation">,</span>\n  writable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n  configurable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n  enumerable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {value: &#39;Polo&#39;, writable: false,enumerable: false,configurable: false}</span>\n<span class="token comment">// 对象中直接定义的属性,writable、enumerable、configurable都是true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { value: 1024, writable: true, enumerable: true, configurable: true }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="reflect-setprototypeof" tabindex="-1"><a class="header-anchor" href="#reflect-setprototypeof" aria-hidden="true">#</a> Reflect.setPrototypeOf</h2><p>Reflect.setPrototypeOf()方法以函数调用的形式设置对象的原型对象,与Object.setPrototypeOf基本一致,关于参考<a href="">原型</a>。</p><h6 id="参数列表-reflect-getprototypeof-target" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-getprototypeof-target" aria-hidden="true">#</a> 参数列表: Reflect.getPrototypeOf(target)</h6><ul><li>target <ul><li>详情:目标对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li><li></li></ul><h2 id="reflect-getprototypeof" tabindex="-1"><a class="header-anchor" href="#reflect-getprototypeof" aria-hidden="true">#</a> Reflect.getPrototypeOf</h2><p>Reflect.getPrototypeOf()方法以函数调用的形式获取对象的原型对象,与Object.getPrototypeOf基本一致,关于参考<a href="">原型</a>。</p><h6 id="参数列表-reflect-getprototypeof-target-1" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-getprototypeof-target-1" aria-hidden="true">#</a> 参数列表: Reflect.getPrototypeOf(target)</h6><ul><li>target <ul><li>详情:目标对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li></ul><h6 id="演示-1" tabindex="-1"><a class="header-anchor" href="#演示-1" aria-hidden="true">#</a> 演示</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// [Object: null prototype] {}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Object(0) []</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;proto&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Object.create()创建指定原型的对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// { name: &#39;proto&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="reflect-has" tabindex="-1"><a class="header-anchor" href="#reflect-has" aria-hidden="true">#</a> Reflect.has</h2><p>Reflect.has()方法判断对象以及其原型链上是否包含某个属性,与in作用相同,返回boolean。</p><h6 id="参数列表-reflect-has-target-propertykey" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-has-target-propertykey" aria-hidden="true">#</a> 参数列表: Reflect.has(target, propertyKey)</h6><ul><li>target <ul><li>详情:目标对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li><li>propertyKey <ul><li>详情:属性名,对象上是否包含该属性</li><li>必填: false,默认undefined</li></ul></li></ul><h6 id="演示-2" tabindex="-1"><a class="header-anchor" href="#演示-2" aria-hidden="true">#</a> 演示</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Tony&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 设置原型对象,原型对象上有 gender属性</span>\nReflect<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">{</span>\n  gender<span class="token operator">:</span><span class="token string">&#39;man&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 不可枚举属性</span>\nReflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;sport&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span><span class="token string">&#39;run&#39;</span><span class="token punctuation">,</span>\n  enumerable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 对象自身的属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 原型链上存在也会返回true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;gender&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;gender&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 不可枚举的属性也会返回true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;sport&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sport&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 不存在的属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="reflect-preventextensions" tabindex="-1"><a class="header-anchor" href="#reflect-preventextensions" aria-hidden="true">#</a> Reflect.preventExtensions</h2><p>Reflect.preventExtensions()方法禁止对象扩展(即禁止新增属性)。</p><h6 id="参数列表-reflect-preventextensions-target" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-preventextensions-target" aria-hidden="true">#</a> 参数列表: Reflect.preventExtensions(target)</h6><ul><li>target <ul><li>详情:目标对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li></ul><h6 id="演示-3" tabindex="-1"><a class="header-anchor" href="#演示-3" aria-hidden="true">#</a> 演示</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> empty <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nReflect<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 无论是属性描述符</span>\nReflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>empty<span class="token punctuation">,</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 还是直接设置属性</span>\nempty<span class="token punctuation">[</span><span class="token string">&#39;sport&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;run&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 都无法设置成功</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h6 id="和object-preventextensions的区别" tabindex="-1"><a class="header-anchor" href="#和object-preventextensions的区别" aria-hidden="true">#</a> 和Object.preventExtensions的区别</h6><p>Object.preventExtensions接收非对象的值时，会将其转换成对象,而Reflect.preventExtensions直接报错。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 非对象会被转换成对象</span>\nReflect<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Reflect.preventExtensions called on non-object - 类型异常: 对非对象调用Reflect.preventExtensions</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="reflect-isextensible" tabindex="-1"><a class="header-anchor" href="#reflect-isextensible" aria-hidden="true">#</a> Reflect.isExtensible</h2><p>Reflect.isExtensible()方法判断对象是否可以可扩展(即是否可新增属性)。</p><h6 id="参数列表-reflect-isextensible-target" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-isextensible-target" aria-hidden="true">#</a> 参数列表: Reflect.isExtensible(target)</h6><ul><li>target <ul><li>目标对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li></ul><h6 id="演示-4" tabindex="-1"><a class="header-anchor" href="#演示-4" aria-hidden="true">#</a> 演示</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;computer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 禁止扩展</span>\nReflect<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;14&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h6 id="与-object-isextensible-的区别" tabindex="-1"><a class="header-anchor" href="#与-object-isextensible-的区别" aria-hidden="true">#</a> 与 Object.isExtensible()的区别</h6><p>Object.isExtensible接收非对象的值时，会将其转换成对象,而Reflect.isExtensible直接报错。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 非对象会被转换成对象</span>\nReflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// TypeError: Reflect.isExtensible called on non-object - 类型异常: 对非对象调用Reflect.isExtensible</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="reflect-ownkeys" tabindex="-1"><a class="header-anchor" href="#reflect-ownkeys" aria-hidden="true">#</a> Reflect.ownKeys</h2><p>Reflect.ownKeys()返回一个由目标对象自身的属性名(包含symbol属性名)组成的数组 - 不包含原型链上的属性。</p><h6 id="参数列表-reflect-ownkeys-target" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-ownkeys-target" aria-hidden="true">#</a> 参数列表: Reflect.ownKeys(target)</h6><ul><li>target <ul><li>详情:目标对象 - 必须是对象,否则抛出异常</li><li>必填: true</li></ul></li></ul><h6 id="演示-5" tabindex="-1"><a class="header-anchor" href="#演示-5" aria-hidden="true">#</a> 演示</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span><span class="token string">&#39;xm&#39;</span><span class="token punctuation">,</span>\n  grade<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;symbol value&#39;</span>\n<span class="token punctuation">}</span>\n\nReflect<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token punctuation">{</span> gender<span class="token operator">:</span> <span class="token string">&#39;man&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Reflect.ownKeys可以获取包含</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;name&#39;, &#39;grade&#39;, Symbol() ]</span>\n\n<span class="token comment">// 等价于 Object.getOwnPropertyNames(获取非symbol的自身属性)和Object.getOwnPropertySymbols组合使用(获取自身symbol属性)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="reflect-apply" tabindex="-1"><a class="header-anchor" href="#reflect-apply" aria-hidden="true">#</a> Reflect.apply</h2><p>Reflect.apply()可以在调用函数的同时指定函数中的this并指定参数列表。</p><h6 id="参数列表-reflect-apply-target-thisargument-argumentslist" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-apply-target-thisargument-argumentslist" aria-hidden="true">#</a> 参数列表: Reflect.apply(target, thisArgument, argumentsList)</h6><ul><li>target <ul><li>详情:目标对象 - 必须是函数,否则抛出异常</li><li>必填: true</li></ul></li><li>thisArgument <ul><li>详情:函数调用时的this</li><li>必填: true</li></ul></li><li>argumentsList <ul><li>详情:函数调用时接收的参数列表,接收数组/类数组结构,不需要参数也要传[]</li><li>必填: true</li></ul></li></ul><h6 id="演示-6" tabindex="-1"><a class="header-anchor" href="#演示-6" aria-hidden="true">#</a> 演示</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this { type: &#39;this&#39; }</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// args [ 1, 2, 3 ]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;this&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用Reflect.apply,较少使用</span>\n<span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> _this<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 等价于 fn.apply, 推荐而且常见, 函数都具备apply这个方法(通过原型链上继承来的)</span>\n<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h6 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h6><p>介绍apply的常见用法,想要熟练用好apply还需要对this有所了解,和Function.prototype.apply(推荐使用)效果相同。<a href="">this - TODO</a></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 改变this指向</span>\n<span class="token comment">// apply具有和call一样改变this的作用</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object String]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Array]</span>\n\n<span class="token comment">// 类数组调用数组的方法</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">,</span>likeArray<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0-1-2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>reverse<span class="token punctuation">,</span>likeArray<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;0&#39;: 2, &#39;1&#39;: 1, &#39;2&#39;: 0, length: 3 }</span>\n\n<span class="token comment">// 字符串可以调用数组的不改变数组的方法,如 join,filter,map等</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// h-e-l-l-o</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>filter<span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> c <span class="token operator">===</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;l&#39;, &#39;l&#39; ]</span>\n\n<span class="token comment">// pop、push、shift、unshift、reverse等会改变原数组的方法无法对字符串使用,因为字符串是不变的</span>\n<span class="token comment">// 类型异常: 不能修改[object String]对象的只读属性 - 之前说过 字符串是不可变的</span>\n<span class="token comment">// console.log(Reflect.apply(Array.prototype.reverse,&#39;hello&#39;,[]));   // TypeError: Cannot assign to read only property &#39;0&#39; of object &#39;[object String]&#39;</span>\n\n<span class="token comment">// 2. 将数组展开传入</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 默认情况下,Math.max以...value的形式接收参数,无法接收一个数组作为参数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n\n<span class="token comment">// 使用Reflect.apply展开传入</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n\n<span class="token comment">// 使用apply可以将数组展开传入</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n\n<span class="token comment">// 等价于</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="reflect-construct" tabindex="-1"><a class="header-anchor" href="#reflect-construct" aria-hidden="true">#</a> Reflect.construct</h2><p>Reflect.construct()类似于new运算符,用于创建构造函数的实例。</p><h6 id="参数列表-reflect-construct-target-argumentslist-newtarget" tabindex="-1"><a class="header-anchor" href="#参数列表-reflect-construct-target-argumentslist-newtarget" aria-hidden="true">#</a> 参数列表 Reflect.construct(target, argumentsList[, newTarget])</h6><ul><li>target <ul><li>详情: 目标对象,必须是函数,否则抛出异常</li><li>必填: true</li></ul></li><li>argumentsList <ul><li>详情: 构造函数的参数列表</li><li>必填: true, 接收数组/类数组结构,不需要参数也要传[]</li></ul></li><li>newTarget <ul><li>详情: 作为新建的实例对象的constructor属性,会改变实例的原型对象和constructor属性</li><li>必填: false,默认为 target</li></ul></li></ul><h6 id="演示-7" tabindex="-1"><a class="header-anchor" href="#演示-7" aria-hidden="true">#</a> 演示</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">;</span>\n  alias<span class="token punctuation">;</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>alias</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>alias<span class="token operator">=</span>alias<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;run&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n  <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;study&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 改变了constructor,可以看到,原型链也发生了改变,无法在使用原本构造函数中的实例方法,而可以使用传入的构造函数的实例方法</span>\n\n<span class="token comment">// zs原本应该是Person的实例对象,可以调用run,不能调用study</span>\n<span class="token comment">// 因为传入了newTarget,改变了constructor和原型链,除了实例自身的属性,其他的都由新的构造函数决定</span>\n<span class="token keyword">const</span> zs <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;法外狂徒&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Student<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新构造函数 Student</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Student { name: &#39;张三&#39;, alias: &#39;法外狂徒&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zs<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [class Student]</span>\n<span class="token comment">// zs.run(); // TypeError: zs.run is not a function</span>\nzs<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// study</span>\n\n<span class="token keyword">const</span> ssx <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;孙尚香&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;大小姐&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>ssx<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ssx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Person { name: &#39;孙尚香&#39;, alias: &#39;大小姐&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ssx<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [class Person]</span>\nssx<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// run </span>\n<span class="token comment">// ssx.study();  // TypeError: ssx.study is not a function</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',88),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);