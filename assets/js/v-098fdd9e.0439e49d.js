"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[2422],{7466:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-098fdd9e",path:"/typescript/interface.html",title:"接口",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"可选属性",slug:"可选属性",children:[{level:3,title:"结合父/子类型思考",slug:"结合父-子类型思考",children:[]}]},{level:2,title:"只读属性",slug:"只读属性",children:[]},{level:2,title:"可索引类型",slug:"可索引类型",children:[]},{level:2,title:"函数类型",slug:"函数类型",children:[]},{level:2,title:"类",slug:"类",children:[{level:3,title:"前置知识",slug:"前置知识",children:[]},{level:3,title:"演示",slug:"演示",children:[]}]},{level:2,title:"继承",slug:"继承",children:[]},{level:2,title:"声明合并",slug:"声明合并",children:[]},{level:2,title:"interface vs type",slug:"interface-vs-type",children:[{level:3,title:"相同点",slug:"相同点",children:[]},{level:3,title:"不同点",slug:"不同点",children:[]},{level:3,title:"异同之处",slug:"异同之处",children:[]}]},{level:2,title:"扩展",slug:"扩展",children:[{level:3,title:"any类型跳过类型校验",slug:"any类型跳过类型校验",children:[]}]}],filePathRelative:"typescript/interface.md",git:{updatedTime:1650876314e3,contributors:[{name:"chenxiaobin",email:"chenxiaobin@chenxiaobindeMacBook-Pro.local",commits:3},{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:3}]}}},5448:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var e=a(6252);const p=(0,e.uE)('<h1 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h1><p>Typescript中,可以使用接口(interface)来定义对象(包括函数)的类型,约束对象,使其和接口定义保持一致。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Animal接口, 限定必须包含类型为string的type属性和类型为()=&gt;void的eat方法</span>\n <span class="token keyword">interface</span> <span class="token class-name">Animal</span>  <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// type和eat缺一不可,并且类型也需要和接口中的保持一致</span>\n<span class="token keyword">let</span> cat<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;Cat&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;吃猫粮&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="可选属性" tabindex="-1"><a class="header-anchor" href="#可选属性" aria-hidden="true">#</a> 可选属性</h2><p>接口中并不是所有属性都是必须的,因此可以通过key?:type的形式定义可选属性,本质上就是联合了undefined类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Book</span>  <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  auth<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 可选属性,类型为 string | undefined,因此可以为undefined</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;YDNJS&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="结合父-子类型思考" tabindex="-1"><a class="header-anchor" href="#结合父-子类型思考" aria-hidden="true">#</a> 结合父/子类型思考</h3>',7),t=(0,e.Uk)("之前在"),l=(0,e.Uk)("类型兼容"),c=(0,e.Uk)("聊到过的关于父/子类型在此处也适用。可选属性包含了必选的情况,而包含关系也可以对应成父/子类型。"),o=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">OptionalBookType</span> <span class="token punctuation">{</span>\n  title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> \n  date<span class="token operator">:</span> Date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">RequiredBookType</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  date<span class="token operator">:</span> Date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 可以看出, 相同属性名的可选属性的类型范围比必选属性范围更大, 因此是父类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">=</span> RequiredBookType <span class="token keyword">extends</span> <span class="token class-name">OptionalBookType</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// type R = true</span>\n\n<span class="token comment">// 解析: OptionalBookType中的title是可选属性,即该属性可有可无,只要满足date属性即可,而RequiredBookType的date和title都是必选的。</span>\n<span class="token comment">// 如对象{ date: new Date() }仅有date属性, 它是OptionalBookType却不是RequiredBookType</span>\n<span class="token comment">// 但 { title: &#39;&#39;, date: new Date() } 既是OptionalBookType也是RequiredBookType</span>\n<span class="token comment">// 可以看出,可选属性能够描述的对象范围更加广泛, 因此为父类型</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="只读属性" tabindex="-1"><a class="header-anchor" href="#只读属性" aria-hidden="true">#</a> 只读属性</h2><p>允许定义只读属性,只读属性在初始化以后就无法再赋值了,通过添加readonly关键字表明属性为只读属性。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 只读属性</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 初始化</span>\n<span class="token keyword">let</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;YDNJS&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 只读属性无法再次赋值</span>\nbook<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;Professional JavaScript for Web Developers&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 无法分配到 &quot;type&quot; ，因为它是只读属性</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="可索引类型" tabindex="-1"><a class="header-anchor" href="#可索引类型" aria-hidden="true">#</a> 可索引类型</h2>',5),r=(0,e.Uk)("可索引类型具有索引签名,描述了对象索引的类型以及对应的返回值,同"),i=(0,e.Uk)("索引类型"),u=(0,e.Uk)("。"),k=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">StringKeyType</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 所有key为string类型的索引对应的类型必须是能够赋值给string的类型</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// OK </span>\n  char<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>    <span class="token comment">// OK, &#39;A&#39;可以赋值给string</span>\n  <span class="token comment">// age: number; // 类型“number”的属性“age”不能赋给“string”索引类型“string”</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token comment">// 索引签名支持number、string、symbol三种,其中number索引签名需要符合string索引签名</span>\n<span class="token keyword">interface</span> <span class="token class-name">NSKeyType</span> <span class="token punctuation">{</span>\n  <span class="token comment">// number类型签名对应的类型必须是string类型签名的子类型</span>\n  <span class="token comment">// 此处string索引签名对应boolean类型,因此number索引签名对应的类型需要是能够赋值给boolean类型的类型</span>\n  <span class="token punctuation">[</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 如果改成string等无法复制给boolean的类型，则会报错</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> \n  <span class="token punctuation">[</span>s<span class="token operator">:</span> <span class="token builtin">symbol</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// symbol不受影响</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型" aria-hidden="true">#</a> 函数类型</h2><p>函数本质上也是对象,接口同样可以描述函数,约束其参数类别和返回值类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">FormatFn</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 限定函数的参数列表为(time:number), 返回值类型为Date</span>\n  <span class="token punctuation">(</span>time<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 参数列表关注的是参数的类型, 参数名不同没事,类型能够对应即可</span>\n<span class="token keyword">let</span> formatFn<span class="token operator">:</span> <span class="token function-variable function">FormatFn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 参数列表</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><h3 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h3><ul><li>类的public、private、protected修饰符。 <ul><li>public: 表示属性/方法为公有的,即谁都能访问, 不添加修饰符,默认就是public, 接口针对的也是类的public属性/方法</li><li>private: 表示属性/方法为私有的,即谁都不能访问, 接口不限制private属性/方法</li><li>protected: 表示属性/方法为受保护的,即只有派生类(子类)能访问, 接口不限制protected属性/方法</li></ul></li><li>类中包含两部分,静态部分以及实例部分 <ul><li>静态部分: static修饰的属性和方法、constructor(构造函数)</li><li>实例部分: 除静态部分就是实例部分了</li></ul></li><li>implements实现接口,针对的是实例部分</li><li>限制类型限制的是静态部分</li></ul><h3 id="演示" tabindex="-1"><a class="header-anchor" href="#演示" aria-hidden="true">#</a> 演示</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 使用方式为 限制类型的方式</span>\n<span class="token keyword">interface</span> <span class="token class-name">BookConstructor</span><span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token punctuation">(</span>title<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 限制构造函数类型,因此无法使用implements</span>\n  <span class="token class-name"><span class="token keyword">type</span></span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 限制静态属性type为string类型</span>\n  <span class="token function-variable function">finish</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 限制静态方法publish</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用方式为 implements</span>\n<span class="token class-name"><span class="token keyword">interface</span></span> BookInstance <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 限制实例属性title</span>\n  <span class="token function-variable function">getTitle</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 限制实例方法finish的类型</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 如前置知识提到的,implements针对是实例部分</span>\n<span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token keyword">implements</span> <span class="token class-name">BookInstance</span><span class="token punctuation">{</span>\n  title<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 实例属性title,</span>\n  <span class="token comment">// 实例方法 getTitle</span>\n  <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> type<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 静态属性type</span>\n  <span class="token comment">// 静态方法 publish</span>\n  <span class="token keyword">static</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;完结撒花~&#39;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">private</span> secret<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 私有属性, 不受接口影响</span>\n  <span class="token keyword">protected</span> auth<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 受保护属性,不受接口影响</span>\n\n  <span class="token comment">// 构造函数属于静态部分</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span>\n\n<span class="token comment">// 限制类型针对的是静态部分</span>\n<span class="token keyword">let</span> NewBook<span class="token operator">:</span> BookConstructor <span class="token operator">=</span> Book<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>接口可以继承其他接口,同时也可以继承类。</p><h4 id="继承单个接口" tabindex="-1"><a class="header-anchor" href="#继承单个接口" aria-hidden="true">#</a> 继承单个接口</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>\n  color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">RedSquare</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>\n  color<span class="token operator">:</span> <span class="token string">&#39;Red&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 当出现重名属性时, 子接口的类型需要是父接口类型的子类型,此处 &#39;Red&#39;是string的子类型</span>\n  sideLength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> square<span class="token operator">:</span> RedSquare <span class="token operator">=</span> <span class="token punctuation">{</span>\n  color<span class="token operator">:</span> <span class="token string">&#39;Red&#39;</span><span class="token punctuation">,</span>\n  sideLength<span class="token operator">:</span> <span class="token number">10</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="继承多个接口" tabindex="-1"><a class="header-anchor" href="#继承多个接口" aria-hidden="true">#</a> 继承多个接口</h4><p>接口允许多继承,即同时extends多个接口。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n  years<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">work</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n  source<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">study</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 此时的WS就包含了Student和Worker的类型定义了</span>\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">WS</span></span> <span class="token keyword">extends</span> <span class="token class-name">Worker</span><span class="token punctuation">,</span>Student <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token comment">// interface WS {</span>\n<span class="token comment">//   years: number;</span>\n<span class="token comment">//   work:() =&gt; void;</span>\n<span class="token comment">//   source: number;</span>\n<span class="token comment">//   study:() =&gt; void;</span>\n<span class="token comment">// }</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h6 id="无法继承多个存在同名但是不同类型的接口" tabindex="-1"><a class="header-anchor" href="#无法继承多个存在同名但是不同类型的接口" aria-hidden="true">#</a> 无法继承多个存在同名但是不同类型的接口</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span><span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Worker和Student存在类型不同的type属性,因此无法同时继承这两个接口</span>\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">WS</span></span> <span class="token keyword">extends</span> <span class="token class-name">Worker</span><span class="token punctuation">,</span>Student <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="继承类" tabindex="-1"><a class="header-anchor" href="#继承类" aria-hidden="true">#</a> 继承类</h4><p>当接口继承类时,继承的是类成员的类型,而不是继承类成员的实现,通过继承类,可以快速的获取类的类型并且可以进行扩展。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n  type <span class="token operator">=</span> <span class="token string">&#39;woker&#39;</span><span class="token punctuation">;</span> \n  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;Working&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span>  <span class="token class-name">Coder</span> <span class="token keyword">extends</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n  language<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 此时的Coder相当于</span>\n<span class="token comment">// interface Coder {</span>\n<span class="token comment">//   type: string; </span>\n<span class="token comment">//   language: string;</span>\n<span class="token comment">//   work: () =&gt; string;</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">let</span> coder<span class="token operator">:</span> Coder <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;coder&#39;</span><span class="token punctuation">,</span>\n  language<span class="token operator">:</span> <span class="token string">&#39;TS&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;Coding~&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h6 id="类成员的修饰符" tabindex="-1"><a class="header-anchor" href="#类成员的修饰符" aria-hidden="true">#</a> 类成员的修饰符</h6><p>接口继承类时,不仅仅会继承公有(public)的成员,还会继承私有(private)和受保护(projected)的成员,若继承类私有和受保护的成员, 则接口只允许被类及其子类所实现(implements)。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n\n<span class="token comment">// 1. 属性名和类型对上了,但是并不是类及其子类的实现</span>\n<span class="token keyword">let</span> person<span class="token operator">:</span> IPerson <span class="token operator">=</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token comment">// 报错: 属性“age”在类型“Person”中是私有属性，但在类型“{ age: number; }”中不是</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 2. 属性名和类型对上了,并且也是私有属性,还是不可以,类之间的私有属性并不是名字相同就一样的</span>\n<span class="token keyword">let</span> man<span class="token operator">:</span> IPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不允许,虽然man中也有私有属性age,但是和Person中的age并不是同一个</span>\n\n<span class="token comment">// 3. Child是Person的子类, 所以是可以的</span>\n<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> child<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="声明合并" tabindex="-1"><a class="header-anchor" href="#声明合并" aria-hidden="true">#</a> 声明合并</h2><p>接口合并,即将多个同名接口合并成一个接口的机制,需要注意以下几点。</p><ul><li>非函数成员应该是唯一的,如果多个接口出现同名的非函数成员,需要确保它们类型一致</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 后续属性声明必须属于同一类型。属性“title”的类型必须为“string”，但此处却为类型“any”</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>同名函数成员会被视为<a href="TODO">函数重载</a>,后面的接口具有更高优先级(出现在重载的前面),</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 特殊情况,当签名中有一个参数类型为 单一字符串字面量(字符串的联合类型不算), 会被提升到重载列表的最前端</span>\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">M</span></span> <span class="token punctuation">{</span>\n  <span class="token function">returnValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">M</span></span> <span class="token punctuation">{</span>\n  <span class="token function">returnValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">M</span></span> <span class="token punctuation">{</span>\n  <span class="token function">returnValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">M</span></span> <span class="token punctuation">{</span>\n  <span class="token function">returnValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 合并后相当于</span>\n<span class="token comment">// 合并之后,除特殊情况外,后面接口的函数定义出现在了前面</span>\n<span class="token comment">// interface Student {</span>\n<span class="token comment">//   returnValue(value: &#39;A&#39;): string;</span>\n<span class="token comment">//   returnValue(value: string): string;</span>\n<span class="token comment">//   returnValue(value:number): number;</span>\n<span class="token comment">//   returnValue(value: any): any</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">let</span> m<span class="token operator">:</span> <span class="token constant">M</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">returnValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">&#39;S&#39;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">&#39;N&#39;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h2 id="interface-vs-type" tabindex="-1"><a class="header-anchor" href="#interface-vs-type" aria-hidden="true">#</a> interface vs type</h2><p>首先,interface是创造类型,而type是给类型起别名,其次, type和interface在描述对象类型时,区别很小,尽可能使用interface,遇到interface无法描述的类型时再使用type。</p><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h3><h4 id="interface和type都可以用来描述对象类型" tabindex="-1"><a class="header-anchor" href="#interface和type都可以用来描述对象类型" aria-hidden="true">#</a> interface和type都可以用来描述对象类型</h4><p>interface和type都可以用来描述对象类型，包括函数类型、构造函数类型、元组(本质上还是对象类型)、索引类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. 对象类型</span>\n<span class="token keyword">interface</span> <span class="token class-name">IObj</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TObj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 2. 函数类型</span>\n<span class="token keyword">interface</span> <span class="token class-name">IFn</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">TFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 3. 构造函数类型</span>\n<span class="token keyword">interface</span> <span class="token class-name">ICon</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">TCon</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 4. 元组</span>\n<span class="token keyword">interface</span> <span class="token class-name">ITuple</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>\n  <span class="token number">0</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token number">1</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>\n  length<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 5. 索引类型</span>\n<span class="token keyword">interface</span> <span class="token class-name">IIndexType</span><span class="token punctuation">{</span>\n  \n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TIndex</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h4 id="类只能实现-implements-对象类型-而不能继承对象类型-extends" tabindex="-1"><a class="header-anchor" href="#类只能实现-implements-对象类型-而不能继承对象类型-extends" aria-hidden="true">#</a> 类只能实现(implements)对象类型,而不能继承对象类型(extends)</h4><h6 id="class不能继承-extends-对象类型" tabindex="-1"><a class="header-anchor" href="#class不能继承-extends-对象类型" aria-hidden="true">#</a> class不能继承(extends)对象类型</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IBook</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TBook</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">Book1</span> <span class="token keyword">extends</span> <span class="token class-name">IBook</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 无法扩展接口‘IBook’。您的意思是‘实施’吗？</span>\n<span class="token keyword">class</span> <span class="token class-name">Book2</span> <span class="token keyword">extends</span> <span class="token class-name">TBook</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// “TBook”仅表示类型，但在此处却作为值使用</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h6 id="class可以实现-implements-对象类型" tabindex="-1"><a class="header-anchor" href="#class可以实现-implements-对象类型" aria-hidden="true">#</a> class可以实现(implements)对象类型</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IBook</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TBook</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">Book1</span> <span class="token keyword">implements</span> <span class="token class-name">IBook</span> <span class="token punctuation">{</span>\n  title <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n<span class="token punctuation">}</span> <span class="token comment">// 无法扩展接口‘IBook’。您的意思是‘实施’吗？</span>\n<span class="token keyword">class</span> <span class="token class-name">Book2</span> <span class="token keyword">implements</span> <span class="token class-name">TBook</span> <span class="token punctuation">{</span>\n  title <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n<span class="token punctuation">}</span> <span class="token comment">// “TBook”仅表示类型，但在此处却作为值使用</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="支持扩展-扩展方式不同" tabindex="-1"><a class="header-anchor" href="#支持扩展-扩展方式不同" aria-hidden="true">#</a> 支持扩展(扩展方式不同)</h4><h6 id="extends和" tabindex="-1"><a class="header-anchor" href="#extends和" aria-hidden="true">#</a> extends和&amp;</h6><p>interface通过extends进行扩展,而type alias通过&amp;进行扩展(对的象联合类型),对象类型无论是interface定义的还是type起别名,都是可以互相扩展的。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 基础类型</span>\n<span class="token keyword">interface</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Book使用&amp;扩展了Base,即Book中包含了Base中的类型定义,拥有了属于自己的类型定义auth</span>\n<span class="token keyword">type</span> <span class="token class-name">Book</span> <span class="token operator">=</span> <span class="token punctuation">{</span> auth<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span> Base<span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;YDNJS&#39;</span><span class="token punctuation">,</span>\n  auth<span class="token operator">:</span> <span class="token string">&#39;X&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ChineseBook使用extends扩展了Book,即包含了Book中的类型,并拥有了属于自己的类型定义type</span>\n<span class="token class-name"><span class="token keyword">interface</span></span> ChineseBook <span class="token keyword">extends</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  type <span class="token operator">:</span> <span class="token string">&#39;Chinese&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> cBook<span class="token operator">:</span> ChineseBook <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;YDNJS&#39;</span><span class="token punctuation">,</span>\n  auth<span class="token operator">:</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;Chinese&#39;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h6 id="扩展多个类型" tabindex="-1"><a class="header-anchor" href="#扩展多个类型" aria-hidden="true">#</a> 扩展多个类型</h6><ul><li>在TS中,类(class)不能支持多继承,但是接口(interface)可以,因此接口可以扩展多个类型</li><li>联合类型可以联合多个类型,所以type也支持扩展多个类型</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Language</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Book</span>  <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">,</span> Language<span class="token punctuation">{</span>\n  auth<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;YDNJS&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;English&#39;</span><span class="token punctuation">,</span>\n  auth<span class="token operator">:</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// type也支持扩展多个类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Book2</span> <span class="token operator">=</span> <span class="token punctuation">{</span> auth<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span> Base <span class="token operator">&amp;</span> Language<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h3><h4 id="_1-interface只能描述对象类型-而type范围相对更广" tabindex="-1"><a class="header-anchor" href="#_1-interface只能描述对象类型-而type范围相对更广" aria-hidden="true">#</a> 1. interface只能描述对象类型,而type范围相对更广</h4><p>interface是定义描述对象结构的类型,因此无法描述如 字面量类型(&#39;A&#39;、1024、true)、string、number、boolean、null、undefined、any、unknown、void、never等非对象类型,而type可以为这些类型起别名。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 字面量类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 非对象类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> <span class="token builtin">string</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">V</span></span> <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">=</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-interface无法描述联合类型、交叉类型、映射类型-type可以" tabindex="-1"><a class="header-anchor" href="#_2-interface无法描述联合类型、交叉类型、映射类型-type可以" aria-hidden="true">#</a> 2. interface无法描述联合类型、交叉类型、映射类型,type可以</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 联合类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">SN</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 交叉类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">BS</span></span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 映射类型</span>\n<span class="token comment">// 之前提到过,在interface中不能使用in,因此无法映射</span>\n<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Object<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_3-interface可以声明合并-而type重复声明会报错" tabindex="-1"><a class="header-anchor" href="#_3-interface可以声明合并-而type重复声明会报错" aria-hidden="true">#</a> 3. interface可以声明合并,而type重复声明会报错</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// type重复声明类型会报错,标识符“Arr”重复</span>\n<span class="token keyword">type</span> <span class="token class-name">Arr</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Arr</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// interface重复声明,则会将声明进行合并</span>\n<span class="token comment">// 注意: 同名属性的类型必须相同</span>\n<span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  date<span class="token operator">:</span> Date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  auth<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  date<span class="token operator">:</span> Date<span class="token punctuation">;</span>\n  auth<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="异同之处" tabindex="-1"><a class="header-anchor" href="#异同之处" aria-hidden="true">#</a> 异同之处</h3><ul><li>标识 <ul><li>✅    支持</li><li>⚙️    type描述对象类型时支持</li><li>🚫    不支持</li></ul></li></ul><table><thead><tr><th style="text-align:center;">表现</th><th style="text-align:center;">type</th><th style="text-align:center;">interface</th><th style="text-align:center;">解析</th></tr></thead><tbody><tr><td style="text-align:center;">是否能够描述非对象类型</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">如字面量、any、unknown、void、string、number、boolean等非对象类型</td></tr><tr><td style="text-align:center;">是否能够描述对象类型</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">如函数类型、构造函数类型、元组、索引类型等对象类型</td></tr><tr><td style="text-align:center;">是否能够被class继承(extends)</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;">类(class)不允许继承类型,无论是type还是interface定义的</td></tr><tr><td style="text-align:center;">是否能够被class实现(implements)</td><td style="text-align:center;">⚙️</td><td style="text-align:center;">✅</td><td style="text-align:center;">类(class)可以实现interface或者type描述的<strong>对象类型</strong></td></tr><tr><td style="text-align:center;">是否能够被interface继承(extends)</td><td style="text-align:center;">⚙️</td><td style="text-align:center;">✅</td><td style="text-align:center;">接口(interface)可以继承interface或type描述的<strong>对象类型</strong></td></tr><tr><td style="text-align:center;">是否支持映射类型</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">interface中不支持in操作符号,也就不支持映射类型，type可以</td></tr><tr><td style="text-align:center;">是否支持联合/交叉类型</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">interface不支持联合/交叉类型,type支持</td></tr><tr><td style="text-align:center;">是否支持声明合并</td><td style="text-align:center;">🚫</td><td style="text-align:center;">✅</td><td style="text-align:center;">interface支持声明合并,type不支持</td></tr><tr><td style="text-align:center;">是否支持扩展</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">无论是type还是interface都支持扩展,type通过&amp;,interface通过extends,并且都支持同时扩展多个类型,当type描述对象类型时,type和interface无异,可以互相扩展</td></tr></tbody></table><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><h3 id="any类型跳过类型校验" tabindex="-1"><a class="header-anchor" href="#any类型跳过类型校验" aria-hidden="true">#</a> any类型跳过类型校验</h3><p>思考以下代码, fn本身接受Book类型参数,若参数类型不匹配会报错,但如果其中扩展了any类型,那么即便很明确的多了属性,也能够通过类型检验。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  auth<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span>book<span class="token operator">:</span> Book<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> data<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> auth<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错: “name”不在类型“Book”中</span>\n<span class="token comment">// 很明显多了name属性,但是因为data是any类型,所以能够通过校验</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n\n<span class="token comment">// 本质原因, 使用扩展运算符扩展any类型,那么这个对象的类型也是any</span>\n<span class="token keyword">const</span> extandData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 此时的extandData是any类型</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',63),b={},m=(0,a(3744).Z)(b,[["render",function(n,s){const a=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e.Wm)(a,{to:"/typescript/type-compatibility.html"},{default:(0,e.w5)((()=>[l])),_:1}),c]),o,(0,e._)("p",null,[r,(0,e.Wm)(a,{to:"/typescript/advanced-type.html#%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B"},{default:(0,e.w5)((()=>[i])),_:1}),u]),k],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);