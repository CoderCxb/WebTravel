"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[4041],{8220:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1ecaaf65",path:"/typescript/advanced-type.html",title:"高级类型",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"联合类型",slug:"联合类型",children:[]},{level:2,title:"交叉类型",slug:"交叉类型",children:[]},{level:2,title:"索引类型",slug:"索引类型",children:[{level:3,title:"索引类型查询",slug:"索引类型查询",children:[]},{level:3,title:"索引访问",slug:"索引访问",children:[]}]},{level:2,title:"映射类型",slug:"映射类型",children:[{level:3,title:"映射类型修饰符",slug:"映射类型修饰符",children:[]}]}],filePathRelative:"typescript/advanced-type.md",git:{updatedTime:1646932531e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:2},{name:"chenxiaobin",email:"chenxiaobin@chenxiaobindeMacBook-Pro.local",commits:1}]}}},9062:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="高级类型" tabindex="-1"><a class="header-anchor" href="#高级类型" aria-hidden="true">#</a> 高级类型</h1><h2 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h2><p>联合类型(Union Types): 表示取值的类型可以是多种类型中的一种,使用 | 连接多个类型,形式如 T1 | T2, 子类型extends联合类型为true。</p><h6 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// NS表示可以是number类型 也可以是string类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">NS</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n<span class="token comment">// number和string都是NS的子类,extends为true</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">NS</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 联合类型的变量在被赋值时,会根据类型推论推断出一个类型,作为当前变量的类型</span>\n<span class="token keyword">let</span> ns<span class="token operator">:</span> <span class="token constant">NS</span><span class="token punctuation">;</span>\n<span class="token comment">// 此处ns赋值了number类型, 则ns的类型为number,所以可以使用number的方法</span>\nns <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ns<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024.00</span>\n\n<span class="token comment">// 此处ns赋值了string类型, 则ns的类型为string,所以可以使用string的方法</span>\nns <span class="token operator">=</span> <span class="token string">&#39;Union&#39;</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ns<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// UNION</span>\n\n<span class="token comment">// 当联合类型的变量被赋值后使用 typeof获取类型时, 获取的是类型推论出的类型, 而不是联合类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> ns<span class="token punctuation">;</span> <span class="token comment">// type S = string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h6 id="访问属性和方法" tabindex="-1"><a class="header-anchor" href="#访问属性和方法" aria-hidden="true">#</a> 访问属性和方法</h6><p>当无法确定变量到底是联合类型中的哪一种类型时,只能访问联合类型中所有类型共有的属性和方法。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>ns<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 此处的ns并无法直接推断出到底是number还是string</span>\n  <span class="token comment">// 这种情况只能访问联合类型所有类型中共有的属性和方法</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ns<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译OK</span>\n  <span class="token comment">// console.log(ns.length); // 报错: 类型“number”上不存在属性“length”</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h6 id="类型省略" tabindex="-1"><a class="header-anchor" href="#类型省略" aria-hidden="true">#</a> 类型省略</h6><p>当联合类型中的某个类型包含了另一个类型时,会保留范围更大的类型,而被包含的类型则被省略。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Man</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Women</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> Man <span class="token operator">|</span> Women<span class="token punctuation">;</span>\n\n<span class="token comment">// Person类型包含了 Man | Women 类型, 所以P就直接变成了Person类型,而不是Man | Women | Person</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> Man <span class="token operator">|</span> Women <span class="token operator">|</span> Person<span class="token punctuation">;</span> <span class="token comment">// type P = Person </span>\n\n\n<span class="token comment">// 同理, any中包含了string, 而string也包含了&quot;A&quot;, 因此 type T = any</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h6 id="可辨识联合类型" tabindex="-1"><a class="header-anchor" href="#可辨识联合类型" aria-hidden="true">#</a> 可辨识联合类型</h6><p>可辨识联合类型,即联合类型中的所有类型存在相同的属性(可辨识特征/标识,可以不止一个),其他属性并无关联,TS会根据标识,匹配联合类型中对应的类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">;</span>\n  size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">;</span>\n  radius<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 此处的Shape为可辨识联合类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Square <span class="token operator">|</span> Circle<span class="token punctuation">;</span>\n\n<span class="token comment">// Square和Circle共有的属性就是 标识</span>\n\n<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 除了用switch,也可以用if</span>\n  <span class="token comment">// 根据不同的标识(kind), s会被识别联合类型中对应的类型</span>\n  <span class="token keyword">switch</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 此处的s为Square类型</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;square&quot;</span><span class="token operator">:</span> \n      <span class="token comment">// 正方形面积 长/宽的平方</span>\n      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 此处的s为Circle类型</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;circle&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// 圆形面积 π(r ** 2)</span>\n      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 当传入的对象的kind属性为&#39;square&#39;时, TS将会认定getArea接收的是Shape中的Square类型</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&#39;square&#39;</span> <span class="token punctuation">,</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// 当传入的对象的kind属性为&#39;circle&#39;时, TS将会认定getArea接收的是Shape中的Circle类型</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span><span class="token punctuation">,</span> radius<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.141592653589793</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a> 交叉类型</h2><p>交叉类型(Intersection Types): 将多个类型合并为一个类型,它包含了所需的所有类型的特性。</p><h6 id="基本使用-1" tabindex="-1"><a class="header-anchor" href="#基本使用-1" aria-hidden="true">#</a> 基本使用</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. 当对象类型交叉时存在相同的属性定义时, 会将所有类型的同名属性进行交叉 </span>\n<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Student</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">symbol</span><span class="token punctuation">;</span>\n  source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  school<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 此时的交叉类型具备Person类型和Student类型的特性</span>\n<span class="token keyword">type</span> <span class="token class-name">Info</span> <span class="token operator">=</span> Person <span class="token operator">&amp;</span> Student<span class="token punctuation">;</span>\n<span class="token comment">// 相当于 </span>\n<span class="token comment">// type Info = {</span>\n<span class="token comment">//   这里为什么是never? 就是因为Person和Student都有name属性, string &amp; symbol的结果就是never</span>\n<span class="token comment">//   name: never;  </span>\n<span class="token comment">//   gender: string;</span>\n<span class="token comment">//   source: string;</span>\n<span class="token comment">//   school: string;</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 2. 基本类型或者字面量类型交叉,一般是取交集</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// type C = &quot;A&quot;</span>\n\n<span class="token comment">// string 和 number没有交集,因此是never</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// type N = never</span>\n\n<span class="token comment">// unknown包含了string,他们的交集是string</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span> <span class="token comment">// type U = string</span>\n\n<span class="token comment">// any比较特殊,交叉后是还是any</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// type A = any</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="索引类型" tabindex="-1"><a class="header-anchor" href="#索引类型" aria-hidden="true">#</a> 索引类型</h2><p>索引类型(Index Types): 通过keyof操作符获取索引类型并可以通过索引类型获取对应的类型,还可以声明索引签名限制成员属性。</p><h3 id="索引类型查询" tabindex="-1"><a class="header-anchor" href="#索引类型查询" aria-hidden="true">#</a> 索引类型查询</h3><p>索引类型查询通过keyof操作符,keyof(索引类型查询操作符)返回对象类型的索引的联合类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Computer</span> <span class="token operator">=</span> <span class="token punctuation">{</span> brand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 对象类型的索引作为类型,此处为Keys类型为 &quot;brand&quot; | &quot;type&quot; | &quot;price&quot;</span>\n<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Computer<span class="token punctuation">;</span> <span class="token comment">// type Keys = &quot;brand&quot; | &quot;type&quot; | &quot;price&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="keyof只获取公有属性" tabindex="-1"><a class="header-anchor" href="#keyof只获取公有属性" aria-hidden="true">#</a> keyof只获取公有属性</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 注意,keyof只能获取公有的keys作为类型</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token keyword">protected</span> money<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 由于keyof只能获取公有的key,所以 type PersonKeys = &quot;name&quot;</span>\n<span class="token keyword">type</span> <span class="token class-name">PersonKeys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="索引签名" tabindex="-1"><a class="header-anchor" href="#索引签名" aria-hidden="true">#</a> 索引签名</h4><p>当声明了索引标签, 所有成员需要符合索引签名。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">StringKeyType</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 所有key为string类型的索引对应的类型必须是能够赋值给string的类型</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// OK </span>\n  char<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>    <span class="token comment">// OK, &#39;A&#39;可以赋值给string</span>\n  <span class="token comment">// age: number; // 类型“number”的属性“age”不能赋给“string”索引类型“string”</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token comment">// 索引签名支持number、string、symbol三种,其中number索引签名需要符合string索引签名</span>\n<span class="token keyword">interface</span> <span class="token class-name">NSKeyType</span> <span class="token punctuation">{</span>\n  <span class="token comment">// number类型签名对应的类型必须是string类型签名的子类型</span>\n  <span class="token comment">// 此处string索引签名对应boolean类型,因此number索引签名对应的类型需要是能够赋值给boolean类型的类型</span>\n  <span class="token punctuation">[</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 如果改成string等无法复制给boolean的类型，则会报错</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> \n  <span class="token punctuation">[</span>s<span class="token operator">:</span> <span class="token builtin">symbol</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// symbol不受影响</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="索引访问" tabindex="-1"><a class="header-anchor" href="#索引访问" aria-hidden="true">#</a> 索引访问</h3><p>Type[Key](索引访问操作符),返回对象索引对应的值类型,Type为对象类型,Key为索引类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Computer</span> <span class="token operator">=</span> <span class="token punctuation">{</span> brand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Computer<span class="token punctuation">;</span>\n\n<span class="token comment">// 获取索引类型为&quot;brand&quot;对应的类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> Computer<span class="token punctuation">[</span><span class="token string">&#39;brand&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// type S = string</span>\n<span class="token comment">// 获取Computer中所有索引类型对应类型的联合类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Values</span> <span class="token operator">=</span> Computer<span class="token punctuation">[</span><span class="token keyword">keyof</span> Computer<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// type Values = string | number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="元组类型转换成联合类型" tabindex="-1"><a class="header-anchor" href="#元组类型转换成联合类型" aria-hidden="true">#</a> 元组类型转换成联合类型</h4><p>元组可以看出一个类型数组, 索引类型为number, 因此可以通过Tuple[number]的方式获取到元组中的类型的联合类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Types</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 元组中存储了多个类型,现在想把元组中的类型变成联合类型</span>\n<span class="token keyword">type</span> <span class="token class-name">TypesUnion</span> <span class="token operator">=</span> Types<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 等价于</span>\n<span class="token comment">// type TypesUnion = string | number | boolean</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="映射类型" tabindex="-1"><a class="header-anchor" href="#映射类型" aria-hidden="true">#</a> 映射类型</h2><p>映射类型: 将一个类型映射到新的类型上,并且可以根据需求对原来的属性类型进行改动</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  weight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n\n<span class="token comment">// 将Info的所有属性都变成只读</span>\n<span class="token comment">// 1. key Info获取到Keys,这个需要遍历的属性名的联合类型</span>\n<span class="token comment">// 2. K in Keys, 遍历Keys,类似for循环,K为遍历出来的每个属性名</span>\n<span class="token comment">// 3. Info[K], 获取到属性名对应的类型, 至此,已经将Info映射过来了</span>\n<span class="token comment">// 4. 添加只读修饰符 readonly, 大功告成 - Readonly就是这样实现的,不过就是使用了泛型而已</span>\n<span class="token keyword">type</span> <span class="token class-name">ReadonlyInfo</span> <span class="token operator">=</span><span class="token punctuation">{</span> \n  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Info<span class="token punctuation">]</span><span class="token operator">:</span> Info<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token comment">// 等价于</span>\n<span class="token comment">// type ReadonlyInfo = {</span>\n<span class="token comment">//   readonly name: string;</span>\n<span class="token comment">//   readonly height: number;</span>\n<span class="token comment">//   readonly weight: number;</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 需要注意的是,in在interface中不能使用,在类型别名形式改成interface就会报错</span>\n<span class="token comment">// interface ReadonlyInfo { </span>\n<span class="token comment">//   readonly [K in keyof Info]: Info[K]; </span>\n<span class="token comment">// }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="映射类型修饰符" tabindex="-1"><a class="header-anchor" href="#映射类型修饰符" aria-hidden="true">#</a> 映射类型修饰符</h3><p>映射类型支持添加/删减readonly以及?修饰符。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name <span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 添加readonly修饰符,使属性变成只读</span>\n<span class="token keyword">type</span> <span class="token class-name">ReadOnlyPerson</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">]</span><span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token comment">// type ReadOnlyPerson = {</span>\n<span class="token comment">//   readonly name: string;</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 移除readonly标识符,使属性变成可写</span>\n<span class="token keyword">type</span> <span class="token class-name">WritablePerson</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> ReadOnlyPerson<span class="token punctuation">]</span><span class="token operator">:</span> ReadOnlyPerson<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token comment">// type WritablePerson = {</span>\n<span class="token comment">//   name: string;</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 添加?标识符使属性变成可选属性</span>\n<span class="token keyword">type</span> <span class="token class-name">OpPerson</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token comment">// type OpPerson = {</span>\n<span class="token comment">//   name?: string;</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 移除?标识符使属性变成可选属性</span>\n<span class="token keyword">type</span> <span class="token class-name">RequiredPerson</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token comment">// type RequiredPerson = {</span>\n<span class="token comment">//   name: string;</span>\n<span class="token comment">// }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>',40),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);