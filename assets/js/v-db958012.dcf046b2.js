"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[1268],{4031:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-db958012",path:"/javascript/grammar-foundation.html",title:"语法基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"script标签",slug:"script标签",children:[{level:3,title:"加载资源",slug:"加载资源",children:[]},{level:3,title:"行内代码",slug:"行内代码",children:[]}]},{level:2,title:"语法",slug:"语法",children:[{level:3,title:"区分大小写",slug:"区分大小写",children:[]},{level:3,title:"注释",slug:"注释",children:[]},{level:3,title:"关键字和保留字",slug:"关键字和保留字",children:[]}]},{level:2,title:"变量",slug:"变量",children:[{level:3,title:"var声明",slug:"var声明",children:[]},{level:3,title:"let声明",slug:"let声明",children:[]},{level:3,title:"const声明",slug:"const声明",children:[]}]},{level:2,title:"语句",slug:"语句",children:[{level:3,title:"",slug:"",children:[]}]},{level:2,title:"面试题",slug:"面试题",children:[{level:3,title:"题一",slug:"题一",children:[]},{level:3,title:"题二",slug:"题二",children:[]}]}],filePathRelative:"javascript/grammar-foundation.md",git:{updatedTime:1649356467e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:2},{name:"chenxiaobin",email:"chenxiaobin@chenxiaobindeMacBook-Pro.local",commits:1},{name:"陈小斌",email:"chenxiaobin@chenxiaobindeMacBook-Pro-2.local",commits:1},{name:"陈小斌",email:"chenxiaobin@chenxiaobindeMacBook-Pro.local",commits:1}]}}},3328:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var t=a(6252);const e=(0,t.uE)('<h1 id="语法基础" tabindex="-1"><a class="header-anchor" href="#语法基础" aria-hidden="true">#</a> 语法基础</h1><h2 id="script标签" tabindex="-1"><a class="header-anchor" href="#script标签" aria-hidden="true">#</a> script标签</h2><p>script标签有两种常见的方式, 一种是通过src去加载资源, 而另一种则是直接在script标签中直接编写JS代码。</p><h3 id="加载资源" tabindex="-1"><a class="header-anchor" href="#加载资源" aria-hidden="true">#</a> 加载资源</h3><p>默认情况下, 浏览器会直接加载并执行脚本,加载和执行脚本这两个过程都会阻塞HTML的解析,可以通过添加defer或async来解决,比如webpack打包出来的脚本就添加了defer。</p><ul><li>src: 要加载执行的JS资源文件</li><li>async: 加载JS的阶段不会阻塞HTML的解析, JS加载完毕立即执行,执行时会阻塞HTML解析,若存在多个async脚本,由于加载完毕就立即执行,那么先加载完成的就会先执行,无法保证执行顺序</li><li>defer: 加载JS的阶段不会阻塞HTML的解析, 等到HTML解析完毕后按序执行JS脚本(若存在多个defer脚本)</li><li>type: 表示脚本语言的内容类型, 一般都是&quot;text/javascript&quot;, 若值为&quot;module&quot;会被当作ES6模块,此时才允许使用import和export</li></ul><img src="/WebTravel/images/script_defer_async.png"><p>PS: 绿色-HTML解析、蓝色-网络请求加载资源 、红色-执行脚本</p><h3 id="行内代码" tabindex="-1"><a class="header-anchor" href="#行内代码" aria-hidden="true">#</a> 行内代码</h3><p>不指定src,而是在script标签内直接编写JS代码,一般推荐写在body标签的末尾。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>行内代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;inline code&#39;</span><span class="token punctuation">)</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><h3 id="区分大小写" tabindex="-1"><a class="header-anchor" href="#区分大小写" aria-hidden="true">#</a> 区分大小写</h3><p>Javascript中无论是变量名、函数名还是运算符，都区分大小写。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello javascript&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">STR</span> <span class="token operator">=</span> <span class="token string">&#39;HELLO JAVASCRIPT&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">===</span> <span class="token constant">STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，它们是两个变量</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>标识符：变量名、函数的名称 <ul><li>第一个字符必须是字母、下划线(_)或者美元符($)</li><li>剩下其他字符可以是字母、下划线、美元符或者数字</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 以下是常见的写法，并不是强制要求，不同团队可能还会存在差异</span>\n<span class="token comment">// 1. 变量名一般采用小驼峰形式，即第一个单词首字母小写，后续的单词首字母大写</span>\n<span class="token keyword">const</span> studentInfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 有时也会使用 xx_yy的形式</span>\n<span class="token keyword">const</span> student_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. 常量一般使用全大写并使用_分割单词的形式</span>\n<span class="token keyword">const</span> <span class="token constant">MAX_NUM</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 3. 函数以及方法通常使用小驼峰形式</span>\n<span class="token keyword">function</span> <span class="token function">studyJavascript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">studyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><h4 id="单行注释" tabindex="-1"><a class="header-anchor" href="#单行注释" aria-hidden="true">#</a> 单行注释</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 这是单行注释</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="多行注释" tabindex="-1"><a class="header-anchor" href="#多行注释" aria-hidden="true">#</a> 多行注释</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/** \n * 多行注释\n * 多行注释\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="jsdoc" tabindex="-1"><a class="header-anchor" href="#jsdoc" aria-hidden="true">#</a> JSDoc</h4><p>使用Typescript可以限定变量的类型，但是有时根据项目情况，只能够编写Javascript代码,此时可以使用JSDoc来辅助Javascript编写函数、方法、类以及命名空间</p>',24),p=(0,t.Uk)("ps:掌握基本用法即可，不需要掌握全部,使用方式参考"),c={href:"https://www.shouce.ren/api/view/a/13232",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("JSDoc"),o=(0,t.Uk)("。"),r=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token doc-comment comment">/**\n   * JSDoc的基本使用\n  *  \n  *  <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">name</span> - 名称\n  *  <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">age</span> - 年龄\n  *  <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> 返回值 \n  */</span>\n  <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p>JSDoc优势一：写完JSDoc的注释后，使用该函数时，将鼠标移至函数名，则会出现JSDoc注释 <img src="/WebTravel/images/jsdoc_1.png"></p></li><li><p>JSDoc优势二：在函数中，参数的类型限定好，虽然可以传入其他类型的参数并且不会报错，但是使用的时候会有代码提示</p><img src="/WebTravel/images/jsdoc_2.png" height="300"></li></ul><h3 id="关键字和保留字" tabindex="-1"><a class="header-anchor" href="#关键字和保留字" aria-hidden="true">#</a> 关键字和保留字</h3><ul><li>关键字: 有特殊用途的单词，不能作为标识符</li></ul><table><thead><tr><th style="text-align:center;">break</th><th style="text-align:center;">case</th><th style="text-align:center;">catch</th><th style="text-align:center;">const</th><th style="text-align:center;">continue</th><th style="text-align:center;">debugger</th><th style="text-align:center;">default</th><th style="text-align:center;">delete</th></tr></thead><tbody><tr><td style="text-align:center;">do</td><td style="text-align:center;">else</td><td style="text-align:center;">export</td><td style="text-align:center;">extends</td><td style="text-align:center;">finally</td><td style="text-align:center;">for</td><td style="text-align:center;">function</td><td style="text-align:center;">if</td></tr><tr><td style="text-align:center;">import</td><td style="text-align:center;">in</td><td style="text-align:center;">instanceof</td><td style="text-align:center;">new</td><td style="text-align:center;">return</td><td style="text-align:center;">super</td><td style="text-align:center;">switch</td><td style="text-align:center;">this</td></tr><tr><td style="text-align:center;">throw</td><td style="text-align:center;">try</td><td style="text-align:center;">typeof</td><td style="text-align:center;">var</td><td style="text-align:center;">void</td><td style="text-align:center;">while</td><td style="text-align:center;">with</td><td style="text-align:center;">yield</td></tr></tbody></table><ul><li>保留字: 未来的保留字，不要作为标识符</li></ul><table><thead><tr><th style="text-align:center;">await</th><th style="text-align:center;">enum</th><th style="text-align:center;">imnplements</th><th style="text-align:center;">interface</th><th style="text-align:center;">let</th><th style="text-align:center;">package</th><th style="text-align:center;">protected</th></tr></thead><tbody><tr><td style="text-align:center;">private</td><td style="text-align:center;">public</td><td style="text-align:center;">static</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>变量，即可以用来保存任何类型的数据，每个变量只是用来存储某些值的标识符，可使用var、let(ES6)、const(ES6)来声明变量</p><h3 id="var声明" tabindex="-1"><a class="header-anchor" href="#var声明" aria-hidden="true">#</a> var声明</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1.基本使用</span>\n<span class="token keyword">var</span> message<span class="token punctuation">;</span>\nmessage <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// 等价于</span>\n<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. 声明作用域 - 函数作用域</span>\n<span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string">&#39;标题&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量，会被绑定在window上,全局可以访问</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 声明在函数中，这个变量仅在函数内使用</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问全局变量</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法访问函数内的局部变量</span>\n\n<span class="token comment">// 3. 声明提升</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 不会报错，因此变量声明被提升到前面去了</span>\n<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 编译器会将函数和var声明的变量提升到前面，函数先于变量 </span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 函数声明会被提升至最前</span>\n<span class="token keyword">var</span> num<span class="token punctuation">;</span>           <span class="token comment">// var声明的变量紧随其后</span>\nnum <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 4. 允许重复声明,注意 声明不会影响之前的值</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> str<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>',11),i={id:"let声明",tabindex:"-1"},u=(0,t._)("a",{class:"header-anchor",href:"#let声明","aria-hidden":"true"},"#",-1),k=(0,t.Uk)(" let声明 "),m=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token comment">// 1. 基本使用</span>\n<span class="token keyword">let</span> message<span class="token punctuation">;</span>\nmessage <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// 等价于</span>\n<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. 声明作用域 - 块级作用域 </span>\n<span class="token comment">// 块级作用域是函数作用域的子集，即let定义的变量在函数中定义也无法在函数外访问</span>\n<span class="token comment">// 在ES6以前,只有全局作用域和块级作用域,在使用了ES6新增了let和const后,才有了块级作用域</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> letArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> varArr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// arr is not defined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>letArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// letArr is not defined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>varArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>\n\n<span class="token comment">// 3. 无法重复声明</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr<span class="token punctuation">;</span> <span class="token comment">// SyntaxError:Identifier &#39;arr&#39; has already been declared - 语法异常:标识符&#39;arr&#39;已经被声明</span>\n\n<span class="token comment">// 4. 无声明提升 - 暂时性死区</span>\n<span class="token comment">// 因为let声明的变量不会提升，所以无法在声明前使用</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError:Cannot access &#39;str&#39; before initialization - 引用异常:无法在变量&#39;str&#39;声明前使用它</span>\n<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello JS&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 5. let声明的变量不会被挂载到window</span>\n<span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">&#39;study grammer&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div>',1),b={id:"const声明",tabindex:"-1"},d=(0,t._)("a",{class:"header-anchor",href:"#const声明","aria-hidden":"true"},"#",-1),h=(0,t.Uk)(" const声明 "),g=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 基本使用 - const声明时必须赋值</span>\n<span class="token keyword">const</span> arr<span class="token punctuation">;</span> <span class="token comment">// SyntaxError:Missing initializer in const declaration - 语法异常:const声明缺少初始值</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 正常</span>\n\n<span class="token comment">// 2. 无法重复声明，同let</span>\n\n<span class="token comment">// 3. 无声明提升 - 暂时性死区 同let</span>\n\n<span class="token comment">// 3. const声明的变量不能修改引用地址，哪怕值一样</span>\n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\nnum <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable - 类型异常:向常量赋值</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token comment">// 但是允许向对象和数组添加元素,因为引用地址没有发生改变</span>\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;box&#39;</span><span class="token punctuation">;</span>  \narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 简单记就是，const定义的变量不能赋值,新增属性、元素不算赋值</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2><h3 id="题一" tabindex="-1"><a class="header-anchor" href="#题一" aria-hidden="true">#</a> 题一</h3><div class="custom-container tip"><p class="custom-container-title">for循环中的let和var有何区别?</p><details class="custom-container details"><summary>查看解析</summary><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> fns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 以下代码输出为什么是10? 将var改为let为什么就正常了？</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;i:&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i:10,  var声明的全局变量,如果使用let,则不会有全局变量,即 i: undefined</span>\nfns<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> fns<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回true，即后续循环会获取到前面for()中的变量的值</span>\n\n<span class="token comment">// 解析: for()可以看作一个代码块{}, 而var的声明作用域为函数作用域, 因此for(var i = 0)会在全局声明一个变量i, 后续访问和修改的i也都是同一个变量</span>\n<span class="token comment">// 而使用let的话, 声明的i就只能在当次for循环中使用,并且后续的修改不会影响到之前的i,故正常</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></details></div><h3 id="题二" tabindex="-1"><a class="header-anchor" href="#题二" aria-hidden="true">#</a> 题二</h3><div class="custom-container tip"><p class="custom-container-title">暂时性死区以及作用域的理解</p><details class="custom-container details"><summary>查看解析</summary><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;One&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: Cannot access &#39;str&#39; before initialization - 引用异常: 无法在声明前使用变量</span>\n  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Two&#39;</span><span class="token punctuation">;</span>  \n  <span class="token comment">// 用let和const都会出现暂时性死区,因为let和const没有变量提升</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// One</span>\n  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Three&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// 之所以能打印出One，首先 var存在变量提示</span>\n  <span class="token comment">// 其次，var是函数作用域，所以这里的str和外部的str是同一个</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 立即执行函数</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Two&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// 将{}修改成函数,此处的str和外部的str就不再是同一个变量</span>\n  <span class="token comment">// 此处访问的就是内部的str了，而在赋值前使用var定义的变量，就是undefined</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></details></div>',8),v={},y=(0,a(3744).Z)(v,[["render",function(n,s){const a=(0,t.up)("OutboundLink"),v=(0,t.up)("Badge");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[p,(0,t._)("a",c,[l,(0,t.Wm)(a)]),o]),r,(0,t._)("h3",i,[u,k,(0,t.Wm)(v,{text:"ES6"})]),m,(0,t._)("h3",b,[d,h,(0,t.Wm)(v,{text:"ES6"})]),g],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);