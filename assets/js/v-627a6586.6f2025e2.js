"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[8421],{3687:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-627a6586",path:"/typescript/skills.html",title:"小技巧",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"TS与JSDoc",slug:"ts与jsdoc",children:[]},{level:3,title:"readonly修饰符",slug:"readonly修饰符",children:[]}],filePathRelative:"typescript/skills.md",git:{updatedTime:1649356467e3,contributors:[{name:"chenxiaobin",email:"chenxiaobin@chenxiaobindeMacBook-Pro.local",commits:1},{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:1}]}}},5083:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="小技巧" tabindex="-1"><a class="header-anchor" href="#小技巧" aria-hidden="true">#</a> 小技巧</h1><h3 id="ts与jsdoc" tabindex="-1"><a class="header-anchor" href="#ts与jsdoc" aria-hidden="true">#</a> TS与JSDoc</h3><p>JSDoc不仅可以在JS中使用,它同样可以在TS中使用,如函数、接口等增加JSDoc的注释,在使用时hover可以获取注释内容作为提示信息,接下去以interface举例。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/** 书籍接口 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/** 书本名称 */</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;YDKJS&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当使用Book时,鼠标悬停(hover)查看Book</p><img src="/WebTravel/images/jsdoc_3.png"><p>当鼠标悬停查看Book的title属性时</p><img src="/WebTravel/images/jsdoc_4.png"><h3 id="readonly修饰符" tabindex="-1"><a class="header-anchor" href="#readonly修饰符" aria-hidden="true">#</a> readonly修饰符</h3><p>readonly可以用来修饰数组和元组类型, 但是需要注意一下写法</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 以数组泛型的形式无法使用readonly</span>\n<span class="token keyword">type</span> <span class="token class-name">NArray</span> <span class="token operator">=</span> <span class="token keyword">readonly</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 报错: 仅允许对数组和元组文本类型使用 &quot;readonly&quot; 类型修饰符</span>\n\n<span class="token comment">// 而type[]的形式是可以使用readonly的</span>\n<span class="token keyword">type</span> <span class="token class-name">SArray</span> <span class="token operator">=</span> <span class="token keyword">readonly</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',11),p={},t=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);