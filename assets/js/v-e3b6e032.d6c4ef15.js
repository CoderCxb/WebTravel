"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[7334],{9854:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-e3b6e032",path:"/typescript/enum.html",title:"枚举",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"普通枚举",slug:"普通枚举",children:[{level:3,title:"数字枚举",slug:"数字枚举",children:[]},{level:3,title:"字符串枚举",slug:"字符串枚举",children:[]},{level:3,title:"异构枚举",slug:"异构枚举",children:[]},{level:3,title:"本质",slug:"本质",children:[]}]},{level:2,title:"const枚举",slug:"const枚举",children:[]},{level:2,title:"作为类型",slug:"作为类型",children:[]}],filePathRelative:"typescript/enum.md",git:{updatedTime:1644834769e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:2}]}}},1513:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(6252);const p=(0,e.uE)('<h1 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h1><p>枚举是带有含义的常量,使用枚举替代往常的直接使用常量的情景,使得代码可以更加便于理解。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 这是一个数字枚举,Up初始值默认为0,后续成员从0开始递增,即 Up=0,Down=1,Left=2,Right=3</span>\n<span class="token keyword">const</span> center <span class="token operator">=</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>\n  Up<span class="token punctuation">,</span>\n  Down<span class="token punctuation">,</span>\n  Left<span class="token punctuation">,</span>\n  Right<span class="token punctuation">,</span>\n  Center <span class="token operator">=</span> center<span class="token punctuation">,</span> <span class="token comment">// 使用变量和字符串同理, 后续成员需要手动指定枚举值</span>\n  CopyUp <span class="token operator">=</span> Up<span class="token punctuation">,</span> <span class="token comment">// 可以访问前面的成员的值,但是无法访问后面的成员的值</span>\n<span class="token punctuation">}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Directions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Up</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="普通枚举" tabindex="-1"><a class="header-anchor" href="#普通枚举" aria-hidden="true">#</a> 普通枚举</h2><p>根据枚举的枚举值的类型,又将枚举分为3类, 数字枚举、字符串枚举以及异构枚举(枚举值为字符串和数字类型)。</p><p>注意: 包含字符串值成员的枚举中不允许使用计算值, 如 1 + 1, 1 &lt;&lt; 2, 1 | 2</p><h3 id="数字枚举" tabindex="-1"><a class="header-anchor" href="#数字枚举" aria-hidden="true">#</a> 数字枚举</h3><p>数字枚举,即对应的常量值均为数字的枚举,默认情况下,第一项枚举的默认值为0,后续枚举项的值会在前一项的基础上+1,因此默认为数字枚举。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>\n  Up<span class="token punctuation">,</span>\n  Down<span class="token punctuation">,</span>\n  Left<span class="token punctuation">,</span>\n  Right\n<span class="token punctuation">}</span>\n\n<span class="token comment">// // 相当于 </span>\n<span class="token comment">// enum Directions {</span>\n<span class="token comment">//   Up = 0,</span>\n<span class="token comment">//   Down = 1,</span>\n<span class="token comment">//   Left = 2,</span>\n<span class="token comment">//   Right = 3,</span>\n<span class="token comment">// }</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Directions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Up</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h6 id="手动指定值" tabindex="-1"><a class="header-anchor" href="#手动指定值" aria-hidden="true">#</a> 手动指定值</h6><p>除了使用默认值以外,还可以通过手动指定的方式为枚举指定值,手动手动值以后,会影响后续的枚举值,因此枚举值是在前一项的基础上递增的。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>\n  Up<span class="token punctuation">,</span> <span class="token comment">// 默认值为0</span>\n  Down<span class="token punctuation">,</span> <span class="token comment">// 根据前一项的值+1,因此为1</span>\n  Left <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  Right<span class="token punctuation">,</span>  <span class="token comment">// 根据前一项的值+1,因此为11</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>\n  Up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  Down <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  Left <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  Right <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="字符串枚举" tabindex="-1"><a class="header-anchor" href="#字符串枚举" aria-hidden="true">#</a> 字符串枚举</h3><p>当所有的枚举值都为字符串类型时,则为字符串枚举,字符串枚举每一项都需要手动指定。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>\n  Up <span class="token operator">=</span> <span class="token string">&#39;up&#39;</span><span class="token punctuation">,</span>\n  Down <span class="token operator">=</span> <span class="token string">&#39;down&#39;</span><span class="token punctuation">,</span>\n  Left <span class="token operator">=</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span>\n  Right <span class="token operator">=</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// up</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="异构枚举" tabindex="-1"><a class="header-anchor" href="#异构枚举" aria-hidden="true">#</a> 异构枚举</h3><p>异构枚举,也可以理解为混合枚举,即枚举值并不是单纯的数字和字符串,而是既有数字又有字符串。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Colors <span class="token punctuation">{</span>\n  Red<span class="token punctuation">,</span>\n  Green <span class="token operator">=</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>\n  Black <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 注意,前一项的枚举值为字符串枚举时,必须手动指定,因为无法从字符串推导出有效的数字</span>\n  Yellow<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token keyword">enum</span> Colors <span class="token punctuation">{</span>\n  Red <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  Green <span class="token operator">=</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>\n  Black <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> \n  Yellow <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="本质" tabindex="-1"><a class="header-anchor" href="#本质" aria-hidden="true">#</a> 本质</h3><p>普通枚举(非const枚举)的本质是一个存储了常量及其含义的对象,形式为{ 枚举名: 枚举值, 枚举值: 枚举名 }。</p>',20),t=(0,e._)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,e._)("pre",{class:"language-typescript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// Directions枚举"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"enum"),(0,e.Uk)(" Directions "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  Up"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  Down"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  Left"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  Right\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\nDirections"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// OK"),(0,e.Uk)("\nDirections"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Up"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// OK"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br")])],-1),c=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" Directions"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 定义枚举"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 1. 立即执行函数表达式, 接收Directions"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},'// 2. 为Directions赋值 以Directions[Directions["Up"] = 0] = "Up"为例 (这句话进行了2次赋值)'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// 2.1 Directions[\"Up\"] = 0 设置Directions的'Up'属性值为0,并且返回0"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},'// 2.2 Directions["Up"] = 0 返回0, 所以相当于 Directions[0] = "Up"'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},'// 2.3 相当于 Directions["Up"] = 0; Directions[0] = "Up"; 两句话'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"Directions"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    Directions"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("Directions"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"Up"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"Up"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    Directions"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("Directions"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"Down"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"Down"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    Directions"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("Directions"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"Left"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"Left"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    Directions"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("Directions"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"Right"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"Right"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("Directions "),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("Directions "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 此时的Directions"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// {"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   // 枚举值: 枚举名"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   '0': 'Up',"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   '1': 'Down',"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   '2': 'Left',"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   '3': 'Right',"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   // 枚举名: 枚举值"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   Up: 0,"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   Down: 1,"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   Left: 2,"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   Right: 3"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// }"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 因此既可以通过枚举名访问,也可以通过枚举值访问"),(0,e.Uk)("\nDirections"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// OK"),(0,e.Uk)("\nDirections"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Up"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// OK"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br")])],-1),o=(0,e.uE)('<h2 id="const枚举" tabindex="-1"><a class="header-anchor" href="#const枚举" aria-hidden="true">#</a> const枚举</h2><p>const枚举是通过const修饰的枚举,其具有以下特点。</p><ul><li>只允许通过枚举名进行访问</li><li>在编译阶段枚举会被删除, 在使用的位置全部以枚举值(字面量)的形式存在</li><li>变量不能作为初始值</li></ul><h6 id="仅允许枚举名访问" tabindex="-1"><a class="header-anchor" href="#仅允许枚举名访问" aria-hidden="true">#</a> 仅允许枚举名访问</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>\n  Up<span class="token punctuation">,</span>\n  Down<span class="token punctuation">,</span>\n  Left<span class="token punctuation">,</span>\n  Right\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 只允许通过枚举名访问</span>\n<span class="token comment">// Directions.Up; // OK</span>\n<span class="token comment">// Directions[0]; // 常量枚举不允许通过枚举值访问</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h6 id="编译阶段删除" tabindex="-1"><a class="header-anchor" href="#编译阶段删除" aria-hidden="true">#</a> 编译阶段删除</h6><p>const枚举在编译之后会被删除, 后续使用枚举值的位置全部以枚举值形式(字面量)存在,可以通过tsc + 文件名的方式将TS编译成JS文件。</p>',7),l=(0,e._)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,e._)("pre",{class:"language-typescript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"enum"),(0,e.Uk)(" Directions "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  Up "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'up'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  Down "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'down'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  Left "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'left'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  Right "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'right'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" up "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'up'"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("up "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(" Directions"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Up"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token builtin"},"console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'OK'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// OK"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br")])],-1),r=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 可以看出, TS文件中定义的const枚举Directions编译后并不存在,只剩下枚举值的字面量"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" up "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'up'"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("up "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"up"'),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"/* Up */"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'OK'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// OK"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),i=(0,e.uE)('<h6 id="变量不能作为初始值" tabindex="-1"><a class="header-anchor" href="#变量不能作为初始值" aria-hidden="true">#</a> 变量不能作为初始值</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> green <span class="token operator">=</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token keyword">enum</span> Colors <span class="token punctuation">{</span>\n  Red<span class="token punctuation">,</span>\n  Yellow<span class="token punctuation">,</span>\n  Green <span class="token operator">=</span> green<span class="token punctuation">,</span> <span class="token comment">// 报错: 常量枚举成员初始值设定项只能包含文字值和其他计算的枚举值</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="作为类型" tabindex="-1"><a class="header-anchor" href="#作为类型" aria-hidden="true">#</a> 作为类型</h2><p>当枚举作为类型使用时, 相当于枚举成员的联合类型,并且和number具有兼容关系，因此取值必须是该枚举的成员。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. 如果是数字枚举和异构枚举,则除了枚举成员以外,还可以赋值任意数字,因此兼容</span>\n<span class="token keyword">const</span> <span class="token keyword">enum</span> Colors <span class="token punctuation">{</span>\n  Red<span class="token punctuation">,</span>\n  Yellow<span class="token punctuation">,</span>\n  Blue<span class="token punctuation">,</span>\n  Green <span class="token operator">=</span> <span class="token string">&#39;G&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> color<span class="token operator">:</span>Colors <span class="token operator">=</span> Colors<span class="token punctuation">.</span>Blue<span class="token punctuation">;</span> <span class="token comment">// OK</span>\ncolor <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n\n<span class="token comment">// 同样,数字枚举和异构枚举的枚举值为number的成员可以赋值给number类型,string类型的成员不行</span>\n<span class="token keyword">let</span> n1<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span>Red<span class="token punctuation">;</span> <span class="token comment">// OK </span>\n<span class="token keyword">let</span> n2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span>Green<span class="token punctuation">;</span> <span class="token comment">// 报错: 不能将类型“Colors”分配给类型“number”, 主要是因为Green对应的值是字符串</span>\n\n\n<span class="token comment">// 2. 如果是字符串枚举,则只允许赋值枚举成员</span>\n<span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>\n  Up <span class="token operator">=</span> <span class="token string">&#39;up&#39;</span><span class="token punctuation">,</span>\n  Down <span class="token operator">=</span> <span class="token string">&#39;down&#39;</span><span class="token punctuation">,</span>\n  Left <span class="token operator">=</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span>\n  Right <span class="token operator">=</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> direction<span class="token operator">:</span> Directions <span class="token operator">=</span> Directions<span class="token punctuation">.</span>Up<span class="token punctuation">;</span> <span class="token comment">// OK</span>\ndirection <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 报错: 不能将类型“1024”分配给类型“Directions”</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',5),u={},k=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,e.up)("CodeGroupItem"),u=(0,e.up)("CodeGroup");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e.Wm)(u,null,{default:(0,e.w5)((()=>[(0,e.Wm)(a,{title:"TS - 编译前",active:""},{default:(0,e.w5)((()=>[t])),_:1}),(0,e.Wm)(a,{title:"JS - 编译后"},{default:(0,e.w5)((()=>[c])),_:1})])),_:1}),o,(0,e.Wm)(u,null,{default:(0,e.w5)((()=>[(0,e.Wm)(a,{title:"TS - 编译前",active:""},{default:(0,e.w5)((()=>[l])),_:1}),(0,e.Wm)(a,{title:"JS - 编译后"},{default:(0,e.w5)((()=>[r])),_:1})])),_:1}),i],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);