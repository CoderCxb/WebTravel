"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[9042],{8616:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6e7325aa",path:"/typescript/type-alias.html",title:"类型别名",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"typescript/type-alias.md",git:{updatedTime:1646411046e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:2}]}}},3920:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(6252);const e=(0,p._)("h1",{id:"类型别名",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#类型别名","aria-hidden":"true"},"#"),(0,p.Uk)(" 类型别名")],-1),t=(0,p._)("p",null,"通过type关键字可以为任何类型起一个别名,后续需要使用这个类型的时候直接使用别名即可,当某个类型使用频率较高时,为它起一个别名,能够有效的提高效率。",-1),o=(0,p.Uk)("与interface比较相似,能做到的事情也有很大的重叠,具体区别参考 "),c=(0,p.Uk)("interface vs type"),l=(0,p.uE)('<p>适用于:</p><ul><li>基础类型,如string、number、boolean、元组、any</li><li>高级类型,如联合类型、交叉类型、索引类型、映射类型</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 基础类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 高级类型 如联合类型、交叉类型等,无法使用interface定义,但是可以使用type</span>\n<span class="token class-name"><span class="token keyword">type</span></span> <span class="token constant">SN</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> sn<span class="token operator">:</span> <span class="token constant">SN</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nsn <span class="token operator">=</span> <span class="token string">&#39;10&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 为类型 { name: string; age: number; } 起了一个别名 Person, 后续使用Person即可</span>\n<span class="token comment">// 当类型在多个地方使用的时候,优势更加明显</span>\n<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Person<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 就不用写成 p: { name: string; age: number; }</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">10</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">fn</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack 10</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>',3),r={},u=(0,a(3744).Z)(r,[["render",function(n,s){const a=(0,p.up)("RouterLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,(0,p._)("p",null,[o,(0,p.Wm)(a,{to:"/typescript/interface.html#interface-vs-type"},{default:(0,p.w5)((()=>[c])),_:1})]),l],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);