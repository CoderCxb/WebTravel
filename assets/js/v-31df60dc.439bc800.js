"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[212],{6101:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-31df60dc",path:"/javascript/data-type/object/map.html",title:"Map - 映射",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Map",slug:"map",children:[{level:3,title:"相等逻辑",slug:"相等逻辑",children:[]},{level:3,title:"Map与Object区别",slug:"map与object区别",children:[]},{level:3,title:"使用演示",slug:"使用演示",children:[]},{level:3,title:"转换",slug:"转换",children:[]}]},{level:2,title:"WeakMap",slug:"weakmap",children:[{level:3,title:"与Map的区别",slug:"与map的区别",children:[]},{level:3,title:"使用演示",slug:"使用演示-1",children:[]}]}],filePathRelative:"javascript/data-type/object/map.md",git:{updatedTime:1641210712e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:2}]}}},8368:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(6252);const t={id:"map-映射",tabindex:"-1"},e=(0,p._)("a",{class:"header-anchor",href:"#map-映射","aria-hidden":"true"},"#",-1),c=(0,p.Uk)(" Map - 映射 "),o=(0,p.uE)('<p>Map是ES新增的引用数据类型,保存键值对,键和值可以是任意类型的值,可以弥补Object键只能是String和Symbol的局限性,当你需要使用对象(引用数据类型)作为key时可以使用Map。</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><p>Map通过构造函数创建Map对象,可接受[[key,value],...]形式的数组,Map实例上提供了操作Map对象的API,Map对象是可迭代对象,参考<a href="TODO">Iterator - 迭代器</a>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 不传递参数</span>\n<span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map(1) { &#39;str&#39; =&gt; &#39;hello&#39; }</span>\n\n<span class="token comment">// 传递[[key,value],...]形式的参数</span>\n<span class="token keyword">const</span> arrKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span>arrKey<span class="token punctuation">,</span><span class="token string">&#39;arr&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;obj&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nm2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map(3) { [] =&gt; &#39;arr&#39;, &#39;obj&#39; =&gt; { type: &#39;obj&#39; }, &#39;code&#39; =&gt; 1024 }</span>\n\n<span class="token comment">// map转成数组,形式如 [[key,value], ... ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>m2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [ [], &#39;arr&#39; ], [ &#39;obj&#39;, { type: &#39;obj&#39; } ], [ &#39;code&#39;, 1024 ] ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="相等逻辑" tabindex="-1"><a class="header-anchor" href="#相等逻辑" aria-hidden="true">#</a> 相等逻辑</h3><ul><li>map的相等逻辑针对的是key,也就是键</li><li>判断逻辑基本同Object.is一致</li><li>+0、-0、0被认为是相等的</li><li>基本数据类型中只有NaN比较特别(NaN不等于自身,但是Set中不会被重复添加)</li><li>引用数据类型是判断引用地址是否为相同地址</li></ul><h3 id="map与object区别" tabindex="-1"><a class="header-anchor" href="#map与object区别" aria-hidden="true">#</a> Map与Object区别</h3><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">Map</th><th style="text-align:center;">Object</th></tr></thead><tbody><tr><td style="text-align:center;">键的类型</td><td style="text-align:center;">任意类型</td><td style="text-align:center;">String或Symbol</td></tr><tr><td style="text-align:center;">键的顺序</td><td style="text-align:center;">Map是有序的</td><td style="text-align:center;">Object是无序的</td></tr><tr><td style="text-align:center;">键的数量</td><td style="text-align:center;">Map可以通过size获取</td><td style="text-align:center;">Object只能通过手动遍历计算</td></tr><tr><td style="text-align:center;">迭代</td><td style="text-align:center;">Map是可迭代对象,默认支持迭代</td><td style="text-align:center;">Object需要使用如Object.keys的Api获取键的数组以后迭代</td></tr><tr><td style="text-align:center;">性能</td><td style="text-align:center;">优化频繁增删时的性能</td><td style="text-align:center;">无优化</td></tr></tbody></table><h3 id="使用演示" tabindex="-1"><a class="header-anchor" href="#使用演示" aria-hidden="true">#</a> 使用演示</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> arrKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> objKey <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// set方法设置键值对,如果key已经存在则覆盖,不存在则创建,返回值是Map对象,可链式调用</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">,</span><span class="token string">&#39;arrValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同一个key重复赋值,会进行覆盖,即保留后者赋的值</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>objKey<span class="token punctuation">,</span><span class="token string">&#39;objValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// size属性返回Map中的元素个数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n\n<span class="token comment">// Map对象上存在Symbol.toStringTag属性,可配置,无法写入和枚举</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Map]</span>\n\n<span class="token comment">// has方法判断Map中是否存在指定的key,存在返回true,否则false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// get方法获取Map中key对应的值,如果找不到,则返回undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// arrValue</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span>\n\n<span class="token comment">// keys方法获取Map中的键(key)的迭代对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Map Iterator] { [], {} }</span>\n\n<span class="token comment">// values方法获取Map中值(value)的迭代对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Map Iterator] { &#39;arrValue&#39;, &#39;objValue&#39; }</span>\n\n<span class="token comment">// entries方法获取Map中键值对的迭代对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[Map Entries] { [ [], &#39;arrValue&#39; ], [ {}, &#39;objValue&#39; ] }</span>\n\n<span class="token keyword">const</span> thisArg <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;thisObj&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// forEach方法遍历执行回调函数 接收参数(value,key,m) 即 (值,键,Map对象)</span>\nmap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>key<span class="token punctuation">,</span>m</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 避免看起来比较乱,这里就注释掉了,需要看的话打开注释即可</span>\n  <span class="token comment">// console.log(value,key,m);</span>\n  <span class="token comment">// console.log(this);</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token doc-comment comment">/**指定回调函数中的this对象 **/</span>  thisArg<span class="token punctuation">)</span>\n\n<span class="token comment">// delete方法删除指定key以及对应的value,删除成功返回true,否则false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// clear方法清空Map中的元素</span>\nmap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map(0) {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h3 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 对象转换成map</span>\n<span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;JavaScript高级程序设计&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bookMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bookMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map(2) { &#39;type&#39; =&gt; &#39;book&#39;, &#39;name&#39; =&gt; &#39;JavaScript高级程序设计&#39; }</span>\n\n<span class="token doc-comment comment">/**\n * map转换成对象的函数\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Map<span class="token punctuation">}</span></span> <span class="token parameter">map</span>  需要转换成对象的Map对象\n */</span>\n<span class="token keyword">function</span> <span class="token function">mapToObject</span><span class="token punctuation">(</span><span class="token parameter">map</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mapToObject</span><span class="token punctuation">(</span>bookMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { type: &#39;book&#39;, name: &#39;JavaScript高级程序设计&#39; }</span>\n\n<span class="token comment">// 数组转换成map,数组的形式需要是 [ [key,value], ... ]形式</span>\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Iron Man&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> heroMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heroMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map(1) { &#39;name&#39; =&gt; &#39;Iron Man&#39; }</span>\n\n<span class="token comment">// map转换成数组</span>\n<span class="token comment">// 1. 使用扩展运算符</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>heroMap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [ &#39;name&#39;, &#39;Iron Man&#39; ] ]</span>\n<span class="token comment">// 2. 使用Array.from</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>heroMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [ &#39;name&#39;, &#39;Iron Man&#39; ] ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap" aria-hidden="true">#</a> WeakMap</h2><p>WeakMap对象存储键值对,其中的键是弱引用且必须是对象,而值可以是任意类型,构造函数使用同map,当你想以对象作为key,并且不想影响对象的垃圾回收,可以使用WeakMap。</p><h3 id="与map的区别" tabindex="-1"><a class="header-anchor" href="#与map的区别" aria-hidden="true">#</a> 与Map的区别</h3><ul><li>WeakMap的键只能是对象</li><li>WeakMap中的键是弱引用(不计入引用,不阻止垃圾回收),值是正常引用,如果没有被别的地方引用,在垃圾回收时会被回收,因此WeakSet不可枚举,也没有size</li><li>WeakMap不可迭代,也没有forEach、keys、values、entries等循环遍历的方法</li></ul><h3 id="使用演示-1" tabindex="-1"><a class="header-anchor" href="#使用演示-1" aria-hidden="true">#</a> 使用演示</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> wm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> arrKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// set方法设置键值对,如果key已经存在则覆盖,不存在则创建,返回值是WeakMap对象,可链式调用</span>\nwm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">,</span><span class="token string">&#39;arrValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// has方法判断WeakMap中是否存在指定的key,存在返回true,否则false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wm<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// get方法获取Map中key对应的值,如果找不到,则返回undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arrValue</span>\n\n<span class="token comment">// delete方法删除指定key以及对应的value,删除成功返回true,否则false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wm<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>arrKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',18),l={},u=(0,a(3744).Z)(l,[["render",function(n,s){const a=(0,p.up)("Badge");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("h1",t,[e,c,(0,p.Wm)(a,{text:"ES6"})]),o],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);