"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[3607],{5239:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2000572f",path:"/typescript/basic-type.html",title:"基础类型",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"类型限定",slug:"类型限定",children:[]},{level:3,title:"类型推论",slug:"类型推论",children:[]},{level:3,title:"类型",slug:"类型",children:[]},{level:3,title:"可赋值性",slug:"可赋值性",children:[]}],filePathRelative:"typescript/basic-type.md",git:{updatedTime:1644572341e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:3}]}}},9534:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="基础类型" tabindex="-1"><a class="header-anchor" href="#基础类型" aria-hidden="true">#</a> 基础类型</h1><h3 id="类型限定" tabindex="-1"><a class="header-anchor" href="#类型限定" aria-hidden="true">#</a> 类型限定</h3><p>TS在定义变量/函数时,可以对其类型进行限定,使其固定为某个类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 通过:type的形式,限定code为number类型, 无法赋值其他类型(有些特殊情况后续会解析)</span>\n<span class="token keyword">let</span> code<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\ncode <span class="token operator">=</span> <span class="token string">&#39;1024&#39;</span><span class="token punctuation">;</span> <span class="token comment">// error TS2322: Type &#39;string&#39; is not assignable to type &#39;number&#39; - string类型无法赋值给number类型</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="类型推论" tabindex="-1"><a class="header-anchor" href="#类型推论" aria-hidden="true">#</a> 类型推论</h3><p>在没有明确指定类型的地方,TS会根据初始值来推断类型(可以通过鼠标移动到变量/函数上查看其类型)。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 虽然没有限定,但是Typescript会根据初始值进行推断</span>\n<span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 推断成number, 相当于 let code: number = 1024;</span>\ncode <span class="token operator">=</span> <span class="token string">&#39;1024&#39;</span><span class="token punctuation">;</span> <span class="token comment">// error TS2322: Type &#39;string&#39; is not assignable to type &#39;number&#39; - string类型无法赋值给number类型</span>\n\n<span class="token comment">// 如果没有初始值,则类型推断成any(任意类型)</span>\n<span class="token keyword">let</span> anyValue<span class="token punctuation">;</span>\nanyValue <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token comment">// OK</span>\nanyValue <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h3><h4 id="字面量类型" tabindex="-1"><a class="header-anchor" href="#字面量类型" aria-hidden="true">#</a> 字面量类型</h4><p>在TS中,字面量既可以作为值,也可以作为类型,如1024,它既可以作为值赋值给变量,也可以作为类型限定变量,绝大部分值都可以作为类型使用(字符串、数字、布尔值、数组、对象...)。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 此处以数字字面量为例,其他字面量同理</span>\n<span class="token comment">// 作为值赋值给变量</span>\n<span class="token keyword">let</span> n<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n\n<span class="token comment">// 作为类型限定变量</span>\n<span class="token keyword">let</span> n2<span class="token operator">:</span> <span class="token number">1024</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 不能将类型&quot;10&quot;分配给类型&quot;1024&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> number</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> decNum<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>      <span class="token comment">// 1024, 十进制</span>\n<span class="token keyword">let</span> binaryNum<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0b10</span><span class="token punctuation">;</span>   <span class="token comment">// 2, 二进制</span>\n<span class="token keyword">let</span> octalNum<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0o10</span><span class="token punctuation">;</span>    <span class="token comment">// 8, 八进制</span>\n<span class="token keyword">let</span> hexNum<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>      <span class="token comment">// 16, 十六进制</span>\n<span class="token keyword">let</span> floatNum<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 浮点数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> string</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> title<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;basic type&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token string">&quot;ts&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sentence<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Now, study </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> boolean</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> isSuccess<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> isFail<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="null-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-undefined" aria-hidden="true">#</a> null 和 undefined</h4><p>默认情况下,null和undefined是所有类型的子类型,这意味着可以将null/undefined赋值给所有类型,可以通过修改tsconfig.json中的配置compilerOptions下的strictNullChecks为true来开启严格空值检查(默认关闭)来禁止这种行为。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 默认情况下,null和undefined可以赋值给所有类型</span>\n<span class="token keyword">let</span> char <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\nchar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nchar <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n\n<span class="token comment">// 无法将其他类型赋值给null类型</span>\n<span class="token keyword">let</span> nullType<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\nnullType <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// Type &#39;1024&#39; is not assignable to type &#39;null&#39; - 1024不能赋值给null类型的变量</span>\n\n<span class="token comment">// 无法将其他类型赋值给undefined类型</span>\n<span class="token keyword">let</span> undefinedType<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\nundefinedType <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// Type &#39;1024&#39; is not assignable to type &#39;undefined&#39; - 1024不能赋值给undefined类型的变量</span>\n\n<span class="token comment">// 默认情况下(不开启严格空值检查),null和undefined可以互相赋值</span>\nundefinedType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nnullType <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="void" tabindex="-1"><a class="header-anchor" href="#void" aria-hidden="true">#</a> void</h4><p>void表示没有任何类型,常用于函数没有返回值时，返回值类型为void,极少配合变量使用。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. 默认不开启严格空值检查, void类型允许接收null和undefined (null和undefined可以赋值给所有类型)</span>\n<span class="token comment">// 2. 开启严格空值检查, void只允许接收undefined</span>\n<span class="token keyword">let</span> v<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\nv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 函数部分会详细解析void与函数的结合使用</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="never" tabindex="-1"><a class="header-anchor" href="#never" aria-hidden="true">#</a> never</h4><p>never表示永远不存在的值的类型,never是所有类型的子类型,可以赋值给任意类型,但其他类型都无法赋值给never(包括any)。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 抛出异常的函数的返回值为never类型</span>\n<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 无法停止执行的函数返回值为never类型</span>\n<span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> num<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;err&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 其他任何类型都无法赋值给never,any都不行</span>\n<span class="token keyword">let</span> anyObj<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> n<span class="token operator">:</span><span class="token builtin">never</span> <span class="token operator">=</span> anyObj<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 定义方式一: type[]</span>\n<span class="token keyword">let</span> numArr1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 定义方式二: Array&lt;type&gt;  通过数组的泛型(泛型部分会讲)</span>\n<span class="token keyword">let</span> numArr2<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 数组的类型推论 - 根据元素类型推论</span>\n<span class="token comment">// 数组空位、null和undefined会被推论成any</span>\n<span class="token keyword">let</span> emptyArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// any[]</span>\n<span class="token keyword">let</span> nArr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// any[]</span>\n\n<span class="token comment">// 其他情况根据元素类型推论</span>\n<span class="token keyword">let</span> mixArr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//  (string | number | boolean)[]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple" aria-hidden="true">#</a> Tuple</h4><p>元组类型用来表示一个指定元素数量和类型的数组。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 数组元素的数量和类型必须和tuple类型保持一致</span>\n<span class="token keyword">const</span> mix<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 第一个元素被限定为string类型,只能赋值string类型</span>\nmix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// Type &#39;number&#39; is not assignable to type &#39;string&#39; - 类型number不能赋值给string类型</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="unknown" tabindex="-1"><a class="header-anchor" href="#unknown" aria-hidden="true">#</a> unknown</h4><p>unknow,未知类型,未知表示它可能是任意一种类型,因此任意类型都可以赋值给unknown,但是unknown只能赋值给unknown本身和any,并且unknown上的属性和方法无法访问。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// unknown类型可以接收任意类型的值</span>\n<span class="token keyword">let</span> unk<span class="token operator">:</span><span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\nunk <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\nunk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\nunk <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nunk <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nunk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nunk <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\nunk <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token function-variable function">unk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// unknow类型的值只能赋值给unknown或者any类型</span>\n<span class="token keyword">let</span> anyValue<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> unk<span class="token punctuation">;</span>\n<span class="token keyword">let</span> unk2<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> unk<span class="token punctuation">;</span>\n\n<span class="token comment">// 其他类型都不能接收unknow的值</span>\n<span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> unk<span class="token punctuation">;</span> <span class="token comment">// 报错: 不能将类型“unknown”分配给类型“string”</span>\n<span class="token comment">// ... 其他同理</span>\n\n<span class="token comment">// 无法访问unknown上的属性和方法,哪怕它真的存在</span>\n<span class="token keyword">const</span> unknownObj<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token punctuation">{</span> char<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;run&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unknownObj<span class="token punctuation">.</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错: 类型“unknown”上不存在属性“char”</span>\nunknownObj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错: 类型“unknown”上不存在属性“run”</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="any" tabindex="-1"><a class="header-anchor" href="#any" aria-hidden="true">#</a> any</h4><p>any,任意类型,可以接收所有类型的值,也可以赋值给除了never的其他所有类型,是TS中最自由的类型,但是这是TypeScript,要是any泛滥就成AnyScript了,TypeScript的优势也就不明显了,所以在开发中尽量避免使用any。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 可以将任意类型的值赋值给any类型</span>\n<span class="token keyword">let</span> value<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\nvalue <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\nvalue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\nvalue <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nvalue <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nvalue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nvalue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\nvalue <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 可以将any类型的值赋值给除了never以外的其他类型</span>\n<span class="token keyword">let</span> v<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// any类型的值是什么都不重要,赋值都是被允许的,所以太自由了,所以违背了使用TS的初衷</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>\n<span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token comment">// OK</span>\n<span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token comment">// OK</span>\n\n<span class="token comment">// any也无法赋值给never</span>\n<span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token comment">// 不能将类型“any”分配给类型“never”</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h4><h5 id="动态赋值" tabindex="-1"><a class="header-anchor" href="#动态赋值" aria-hidden="true">#</a> 动态赋值</h5><p>Typescript是静态编译时进行类型检测,而使用[key]的形式进行<a href="TODO">动态赋值</a>,在运行阶段才能确定key值,所以TS无法检测到该赋值是否合法。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  type<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> p<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;Man&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\np<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\np<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token comment">//  类型“Person”上不存在属性“age”</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h5><p>Object在TS中的使用分为两种,一是作为类型,此时是interface Object{},二是作为值,此时是ObjectConstructor接口限定的对象(TS内部实现)</p><h6 id="类型与值" tabindex="-1"><a class="header-anchor" href="#类型与值" aria-hidden="true">#</a> 类型与值</h6><p>在同一个作用域中可以同时定义同名的类型和变量,在作为类型或值时使用,互不影响\b,Object就是如此,既可以作为类型使用,又可以作为值使用。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 类型</span>\n<span class="token comment">// 定义了一个名为 Person 的接口</span>\n<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 值</span>\n<span class="token comment">// 声明Person变量,类型为Function</span>\n<span class="token keyword">declare</span> <span class="token keyword">let</span> Person<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 定义Person</span>\n<span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;use as value&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 作为类型使用</span>\n<span class="token keyword">let</span> p<span class="token operator">:</span>Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;person&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 作为值使用</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// use as value</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h6 id="解析object" tabindex="-1"><a class="header-anchor" href="#解析object" aria-hidden="true">#</a> 解析Object</h6><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 缩略版Object接口,留下部分属性和方法的定义</span>\n<span class="token comment">// Object作为类型使用时,使用的是interface定义的Object</span>\n<span class="token keyword">interface</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>\n  constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Object<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 缩略版限定Object构造函数的接口,留下部分属性和方法的定义</span>\n<span class="token keyword">interface</span> <span class="token class-name">ObjectConstructor</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span><span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> Object<span class="token punctuation">;</span> \n  <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> \n  <span class="token keyword">readonly</span> prototype<span class="token operator">:</span> Object<span class="token punctuation">;</span>\n  <span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 声明Object的值,注意,这个是值而不是类型,当Object作为值使用的时候,它的类型为ObjectConstructor</span>\n<span class="token keyword">declare</span> <span class="token keyword">var</span> Object<span class="token operator">:</span> ObjectConstructor<span class="token punctuation">;</span> <span class="token comment">// 限定Object作为值的时候的类型</span>\n\n<span class="token comment">// Object作为值使用的时候,使用的是ObjectConstructor限定的Object构造函数(本质上是对象)</span>\n<span class="token comment">//@ts-ignore</span>\nObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token doc-comment comment">/** 此处为Object的实现 **/</span><span class="token punctuation">}</span> \n\n<span class="token comment">// 此时Object是类型,使用interface Object</span>\n<span class="token keyword">let</span> obj<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 这些情况是Object作为值使用的时候,使用Object对象</span>\nObject<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">Object</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h6 id="装箱" tabindex="-1"><a class="header-anchor" href="#装箱" aria-hidden="true">#</a> 装箱</h6><p>当基本数据类型如(number、string、boolean、undefined、null)等作为Object使用或赋值时,会进行装箱(包装成对象)和拆箱(恢复成基本数据类型)的操作,不影响原本的执行逻辑,因此可以将基本数据类型赋值给Object类型的变量,这也是为什么基本数据类型可以调用方法的原因(undefined和null没有属性和方法)。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 判断类型时会被包装成Object(1024),实际赋值进去的还是1024,JS引擎内部做的</span>\n<span class="token keyword">const</span> num<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 直接使用时是正常的使用</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>\n\n<span class="token comment">// 作为对象使用时,会被包装成 Object(num),所以可以调用属性/方法</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: Number]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="类型限定-1" tabindex="-1"><a class="header-anchor" href="#类型限定-1" aria-hidden="true">#</a> 类型限定</h6><p>对象默认情况下是具备Object上的所有方法和属性,如果需要重写对象的方法,那么需要和接口Object限定的保持一致。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 接口Object上限定了toString必须返回string类型,所以如果在对象中重写toString方法,也必须返回string类型,其他属性/方法同理</span>\n<span class="token keyword">const</span> obj<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;Object&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 初始化时,对于属性/方法是没有限制的,哪怕这些属性方法不在Object接口上</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;BOOK - YDNJS&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 必须返回string类型</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 但是后续使用的时候只能使用Object上有的属性和方法</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BOOK - YDNJS</span>\n\n<span class="token comment">// type在Object接口上没有定义,无法访问</span>\n<span class="token comment">// console.log(obj.type); // 类型“Object”上不存在属性“type”</span>\n\n<span class="token comment">// 动态访问</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="object-1" tabindex="-1"><a class="header-anchor" href="#object-1" aria-hidden="true">#</a> object</h5><p>限定为对象类型(引用数据类型即可),初始化时对于对象中的属性/方法没有限制,并且并不受Object接口的类型限制,但无法接收基本数据类型(不会装箱和拆箱)。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. 无法接收基本数据类型</span>\n<span class="token comment">// const num:object = 1024; // 不能将类型“number”分配给类型“object”</span>\n\n<span class="token comment">// 2. 覆盖string原有的方法不受接口Object类型的限制</span>\n<span class="token keyword">const</span> obj<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 初始化时,对于属性/方法是没有限制的,哪怕这些属性方法不在Object接口上</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 原本是要返回一个string类型,现在返回其他类型也是被允许的</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 3. 但是后续使用的时候只能使用Object上有的属性和方法</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\n\n<span class="token comment">// type在Object接口上没有定义,无法访问</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型“object”上不存在属性“type”</span>\n\n<span class="token comment">// 动态访问</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h5 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> {}</h5><p>空对象类型(引用数据类型即可),虽然叫做空对象类型,但是初始化时对于对象中的属性/方法没有限制,并且并不受Object接口的类型限制,能够接收基本数据类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. 接收基本数据类型</span>\n<span class="token keyword">const</span> num<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 不能将类型“number”分配给类型“object”</span>\n\n<span class="token comment">// 2. 覆盖string原有的方法不受接口Object类型的限制</span>\n<span class="token keyword">const</span> obj<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;{}&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 初始化时,对于属性/方法是没有限制的,哪怕这些属性方法不在Object接口上</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 原本是要返回一个string类型,现在返回其他类型也是被允许的</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 3. 但是后续使用的时候只能使用Object上有的属性和方法</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\n\n<span class="token comment">// type在Object接口上没有定义,无法访问</span>\n<span class="token comment">// console.log(obj.type); // 类型“{}”上不存在属性“type”</span>\n\n<span class="token comment">// 动态访问</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h5 id="object-vs-object-vs" tabindex="-1"><a class="header-anchor" href="#object-vs-object-vs" aria-hidden="true">#</a> Object vs object vs {}</h5><p>一般对对象进行限定,都是自定义interface限定,这三种情况的使用场景较少,但是还是可以了解一下这三者的区别。</p><p>无论是Object、object还是{},本质含义上都是限定引用数据类型(拆箱/拆箱从含义上也是让传入的数据变成对象),Object是一个接口(interface),而object和{}就是指代引用数据类型,因此不受Object接口中的类型限制(覆盖时类型不受限制)。</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">Object</th><th style="text-align:center;">object</th><th style="text-align:center;">{}</th></tr></thead><tbody><tr><td style="text-align:center;">含义</td><td style="text-align:center;">Object接口</td><td style="text-align:center;">引用数据类型</td><td style="text-align:center;">引用数据类型</td></tr><tr><td style="text-align:center;">能否接收基本数据类型(装箱/拆箱)</td><td style="text-align:center;">能</td><td style="text-align:center;">不能</td><td style="text-align:center;">能</td></tr><tr><td style="text-align:center;">覆盖Object接口的属性/方法,类型是否受限制</td><td style="text-align:center;">受限制</td><td style="text-align:center;">不受限制</td><td style="text-align:center;">不受限制</td></tr><tr><td style="text-align:center;">初始化时,是否能够定义接口中不存在的属性/方法</td><td style="text-align:center;">能</td><td style="text-align:center;">能</td><td style="text-align:center;">能</td></tr><tr><td style="text-align:center;">静态访问Object接口外的属性/方法</td><td style="text-align:center;">不能</td><td style="text-align:center;">不能</td><td style="text-align:center;">不能</td></tr></tbody></table><h3 id="可赋值性" tabindex="-1"><a class="header-anchor" href="#可赋值性" aria-hidden="true">#</a> 可赋值性</h3><ul><li>看法 <ul><li>竖着看：查看类型可以接收哪些类型</li><li>横着看：查看类型可以赋值给哪些类型</li></ul></li><li>标识 <ul><li>✅   允许接收/赋值</li><li>⚙️   当strictNullChecks设置为false时(默认情况),允许接收/赋值</li><li>🚫   不允许接收/赋值</li></ul></li></ul><table><thead><tr><th style="text-align:center;"><div>赋值 ➡️</div> <div>接收 ⬇️</div></th><th style="text-align:center;">any</th><th style="text-align:center;">unknown</th><th style="text-align:center;">object</th><th style="text-align:center;">void</th><th style="text-align:center;">null</th><th style="text-align:center;">undefined</th><th style="text-align:center;">never</th><th style="text-align:center;">简述</th></tr></thead><tbody><tr><td style="text-align:center;">any</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">any类型可以接收任何类型,可以赋值给除never以外的其它类型</td></tr><tr><td style="text-align:center;">unknown</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;">unknown类型可以接收任何类型,但只能赋值给unknown和any类型</td></tr><tr><td style="text-align:center;">object</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">void</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">null</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">⚙️</td><td style="text-align:center;">⚙️</td><td style="text-align:center;">✅</td><td style="text-align:center;">⚙️</td><td style="text-align:center;">🚫</td><td style="text-align:center;">默认情况,null可以赋值给除never以外的任何类型</td></tr><tr><td style="text-align:center;">undefined</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">⚙️</td><td style="text-align:center;">✅</td><td style="text-align:center;">⚙️</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">默认情况,undefined可以赋值给除never以外的任何类型</td></tr><tr><td style="text-align:center;">never</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">never类型可以赋值给任何类型,但只能接收never类型</td></tr></tbody></table>',67),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);