"use strict";(self.webpackChunkweb_travel=self.webpackChunkweb_travel||[]).push([[3236],{535:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-38e25c14",path:"/typescript/type-guard.html",title:"类型保护",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"in",slug:"in",children:[]},{level:2,title:"typeof",slug:"typeof",children:[]},{level:2,title:"instanceof",slug:"instanceof",children:[]},{level:2,title:"自定义类型保护",slug:"自定义类型保护",children:[]}],filePathRelative:"typescript/type-guard.md",git:{updatedTime:1644572341e3,contributors:[{name:"cxb",email:"chenxiaobin_cxb@youzan.com",commits:2}]}}},4182:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="类型保护" tabindex="-1"><a class="header-anchor" href="#类型保护" aria-hidden="true">#</a> 类型保护</h1><p>类型保护是能够确保某个变量或参数在一定的范围内能够正常使用的表达式,通过类型保护,该变量或参数在该范围内会被当作正确的类型进行使用,从而通过类型检测。</p><h2 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h2><p>in关键字同样可以推断类型,前提是该属性能够有效的区分不同类型(并非共有属性)。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Runner</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  level<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  run<span class="token operator">:</span><span class="token builtin">Function</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Student</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  source<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  study<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">todo</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Runner <span class="token operator">|</span> Student<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&#39;run&#39;</span> <span class="token keyword">in</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 存在run,必定是Runner类型,因此在if的作用域中,p为Runner类型</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    <span class="token comment">// 由于p只能是Runner或Student,else以后只能是Student了(如果类型更多,还需要继续判断)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 共有属性/方法无法进行类型保护</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// Runner和Student都存在name属性</span>\n    <span class="token comment">// 因此name in p无法确定p是Runner还是Student,所以在这个if的作用域中只能访问共有属性</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h2><p>typeof适用于基本数据类型保护,因为对象类型typeof的结果都是object,并不能有效进行区分。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 此if的作用域中,v的类型为string</span>\n    <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 此if的作用域中,v的类型为number</span>\n    <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    <span class="token comment">// 此if的作用域中,v的类型为symbol</span>\n    <span class="token keyword">return</span> v<span class="token punctuation">.</span>description<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h2><p>instanceof适用于类和构造函数的类型保护,无法对基础类型和普通对象类型进行保护。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Runner</span><span class="token punctuation">{</span>\n  level<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Worker</span><span class="token punctuation">{</span>\n  source<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">todo</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Runner <span class="token operator">|</span> Worker<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Runner</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 此if作用域中,p是Runner的实例,因此可以访问Runner的实例属性/方法</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    <span class="token comment">// 此if作用域中,p是Worker的实例,因此可以访问Worker的实例属性/方法</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="自定义类型保护" tabindex="-1"><a class="header-anchor" href="#自定义类型保护" aria-hidden="true">#</a> 自定义类型保护</h2><p>自定义类型保护通过定义一个方法,返回值为argument is Type,通过判断返回值是否为true,判断某个参数是否是Type类型。相较于之前的几种类型保护方式,自定义的灵活性更高,但是书写成本也更高(代码量更多了),但是它可以和typeof和instanceof结合(控制返回值而已),因此具备基础类型/类/普通对象类型保护的能力。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Runner</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  level<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  run<span class="token operator">:</span><span class="token builtin">Function</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Student</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  source<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  study<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 参数一般是联合类型,如这里的p是 Runner | Student</span>\n<span class="token comment">// 返回值为类型谓词, argument is Type, 即某个参数是否是某个类型,Type只能是联合类型其中的类型之一</span>\n<span class="token keyword">function</span> <span class="token function">isRunner</span><span class="token punctuation">(</span>p<span class="token operator">:</span>Runner <span class="token operator">|</span> Student<span class="token punctuation">)</span><span class="token operator">:</span> p <span class="token keyword">is</span> Runner<span class="token punctuation">{</span> <span class="token comment">// 这里的类型只能是Runner或者Student</span>\n  <span class="token comment">// 当返回值为true时,则该参数被识别为Type, 此处为例,返回值为true,则p为Runner类型</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token keyword">as</span> Runner<span class="token punctuation">)</span><span class="token punctuation">.</span>run <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n  <span class="token comment">// 如果要判断基础类型 结合typeof, 如 </span>\n  <span class="token comment">// 如果要判断类类型,结合instanceof </span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">todo</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Runner <span class="token operator">|</span> Student<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 此处p的类型为Runner | Student,因此只能访问共有属性/方法</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name是共有的属性</span>\n  <span class="token comment">// 通过自定义类型保护,可以使p的类型更加明确,并且具备相应的代码提示和检测</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRunner</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// isRunner判断为true,则在此if作用域中,p为Runner类型</span>\n    p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    <span class="token comment">// p要么是Runner,要么是Student,因此else以后只能是Student</span>\n    p<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// 结合typeof进行基础类型保护</span>\n<span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 同理可以结合instanceof 进行类的类型保护, 这里就不演示了</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div>',14),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);